
LM35.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ac4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08002c94  08002c94  00012c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002d60  08002d60  00012d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002d68  08002d68  00012d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002d6c  08002d6c  00012d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08002d70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000120  20000070  08002de0  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000800  20000190  08002de0  00020190  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000a50c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001f30  00000000  00000000  0002a5ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003ff7  00000000  00000000  0002c4dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000778  00000000  00000000  000304d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000958  00000000  00000000  00030c50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003ff4  00000000  00000000  000315a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000030d9  00000000  00000000  0003559c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00038675  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001a80  00000000  00000000  000386f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002c7c 	.word	0x08002c7c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08002c7c 	.word	0x08002c7c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b97a 	b.w	80005bc <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	468c      	mov	ip, r1
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	9e08      	ldr	r6, [sp, #32]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d151      	bne.n	8000394 <__udivmoddi4+0xb4>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d96d      	bls.n	80003d2 <__udivmoddi4+0xf2>
 80002f6:	fab2 fe82 	clz	lr, r2
 80002fa:	f1be 0f00 	cmp.w	lr, #0
 80002fe:	d00b      	beq.n	8000318 <__udivmoddi4+0x38>
 8000300:	f1ce 0c20 	rsb	ip, lr, #32
 8000304:	fa01 f50e 	lsl.w	r5, r1, lr
 8000308:	fa20 fc0c 	lsr.w	ip, r0, ip
 800030c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000310:	ea4c 0c05 	orr.w	ip, ip, r5
 8000314:	fa00 f40e 	lsl.w	r4, r0, lr
 8000318:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800031c:	0c25      	lsrs	r5, r4, #16
 800031e:	fbbc f8fa 	udiv	r8, ip, sl
 8000322:	fa1f f987 	uxth.w	r9, r7
 8000326:	fb0a cc18 	mls	ip, sl, r8, ip
 800032a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800032e:	fb08 f309 	mul.w	r3, r8, r9
 8000332:	42ab      	cmp	r3, r5
 8000334:	d90a      	bls.n	800034c <__udivmoddi4+0x6c>
 8000336:	19ed      	adds	r5, r5, r7
 8000338:	f108 32ff 	add.w	r2, r8, #4294967295
 800033c:	f080 8123 	bcs.w	8000586 <__udivmoddi4+0x2a6>
 8000340:	42ab      	cmp	r3, r5
 8000342:	f240 8120 	bls.w	8000586 <__udivmoddi4+0x2a6>
 8000346:	f1a8 0802 	sub.w	r8, r8, #2
 800034a:	443d      	add	r5, r7
 800034c:	1aed      	subs	r5, r5, r3
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb5 f0fa 	udiv	r0, r5, sl
 8000354:	fb0a 5510 	mls	r5, sl, r0, r5
 8000358:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800035c:	fb00 f909 	mul.w	r9, r0, r9
 8000360:	45a1      	cmp	r9, r4
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x98>
 8000364:	19e4      	adds	r4, r4, r7
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	f080 810a 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800036e:	45a1      	cmp	r9, r4
 8000370:	f240 8107 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000374:	3802      	subs	r0, #2
 8000376:	443c      	add	r4, r7
 8000378:	eba4 0409 	sub.w	r4, r4, r9
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	2100      	movs	r1, #0
 8000382:	2e00      	cmp	r6, #0
 8000384:	d061      	beq.n	800044a <__udivmoddi4+0x16a>
 8000386:	fa24 f40e 	lsr.w	r4, r4, lr
 800038a:	2300      	movs	r3, #0
 800038c:	6034      	str	r4, [r6, #0]
 800038e:	6073      	str	r3, [r6, #4]
 8000390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000394:	428b      	cmp	r3, r1
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0xc8>
 8000398:	2e00      	cmp	r6, #0
 800039a:	d054      	beq.n	8000446 <__udivmoddi4+0x166>
 800039c:	2100      	movs	r1, #0
 800039e:	e886 0021 	stmia.w	r6, {r0, r5}
 80003a2:	4608      	mov	r0, r1
 80003a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a8:	fab3 f183 	clz	r1, r3
 80003ac:	2900      	cmp	r1, #0
 80003ae:	f040 808e 	bne.w	80004ce <__udivmoddi4+0x1ee>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xdc>
 80003b6:	4282      	cmp	r2, r0
 80003b8:	f200 80fa 	bhi.w	80005b0 <__udivmoddi4+0x2d0>
 80003bc:	1a84      	subs	r4, r0, r2
 80003be:	eb65 0503 	sbc.w	r5, r5, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	46ac      	mov	ip, r5
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d03f      	beq.n	800044a <__udivmoddi4+0x16a>
 80003ca:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	b912      	cbnz	r2, 80003da <__udivmoddi4+0xfa>
 80003d4:	2701      	movs	r7, #1
 80003d6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003da:	fab7 fe87 	clz	lr, r7
 80003de:	f1be 0f00 	cmp.w	lr, #0
 80003e2:	d134      	bne.n	800044e <__udivmoddi4+0x16e>
 80003e4:	1beb      	subs	r3, r5, r7
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	2101      	movs	r1, #1
 80003ee:	fbb3 f8f2 	udiv	r8, r3, r2
 80003f2:	0c25      	lsrs	r5, r4, #16
 80003f4:	fb02 3318 	mls	r3, r2, r8, r3
 80003f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fc:	fb0c f308 	mul.w	r3, ip, r8
 8000400:	42ab      	cmp	r3, r5
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x134>
 8000404:	19ed      	adds	r5, r5, r7
 8000406:	f108 30ff 	add.w	r0, r8, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x132>
 800040c:	42ab      	cmp	r3, r5
 800040e:	f200 80d1 	bhi.w	80005b4 <__udivmoddi4+0x2d4>
 8000412:	4680      	mov	r8, r0
 8000414:	1aed      	subs	r5, r5, r3
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb5 f0f2 	udiv	r0, r5, r2
 800041c:	fb02 5510 	mls	r5, r2, r0, r5
 8000420:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000424:	fb0c fc00 	mul.w	ip, ip, r0
 8000428:	45a4      	cmp	ip, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x15c>
 800042c:	19e4      	adds	r4, r4, r7
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x15a>
 8000434:	45a4      	cmp	ip, r4
 8000436:	f200 80b8 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 040c 	sub.w	r4, r4, ip
 8000440:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000444:	e79d      	b.n	8000382 <__udivmoddi4+0xa2>
 8000446:	4631      	mov	r1, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1ce 0420 	rsb	r4, lr, #32
 8000452:	fa05 f30e 	lsl.w	r3, r5, lr
 8000456:	fa07 f70e 	lsl.w	r7, r7, lr
 800045a:	fa20 f804 	lsr.w	r8, r0, r4
 800045e:	0c3a      	lsrs	r2, r7, #16
 8000460:	fa25 f404 	lsr.w	r4, r5, r4
 8000464:	ea48 0803 	orr.w	r8, r8, r3
 8000468:	fbb4 f1f2 	udiv	r1, r4, r2
 800046c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000470:	fb02 4411 	mls	r4, r2, r1, r4
 8000474:	fa1f fc87 	uxth.w	ip, r7
 8000478:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800047c:	fb01 f30c 	mul.w	r3, r1, ip
 8000480:	42ab      	cmp	r3, r5
 8000482:	fa00 f40e 	lsl.w	r4, r0, lr
 8000486:	d909      	bls.n	800049c <__udivmoddi4+0x1bc>
 8000488:	19ed      	adds	r5, r5, r7
 800048a:	f101 30ff 	add.w	r0, r1, #4294967295
 800048e:	f080 808a 	bcs.w	80005a6 <__udivmoddi4+0x2c6>
 8000492:	42ab      	cmp	r3, r5
 8000494:	f240 8087 	bls.w	80005a6 <__udivmoddi4+0x2c6>
 8000498:	3902      	subs	r1, #2
 800049a:	443d      	add	r5, r7
 800049c:	1aeb      	subs	r3, r5, r3
 800049e:	fa1f f588 	uxth.w	r5, r8
 80004a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004a6:	fb02 3310 	mls	r3, r2, r0, r3
 80004aa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ae:	fb00 f30c 	mul.w	r3, r0, ip
 80004b2:	42ab      	cmp	r3, r5
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x1e6>
 80004b6:	19ed      	adds	r5, r5, r7
 80004b8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004bc:	d26f      	bcs.n	800059e <__udivmoddi4+0x2be>
 80004be:	42ab      	cmp	r3, r5
 80004c0:	d96d      	bls.n	800059e <__udivmoddi4+0x2be>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443d      	add	r5, r7
 80004c6:	1aeb      	subs	r3, r5, r3
 80004c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004cc:	e78f      	b.n	80003ee <__udivmoddi4+0x10e>
 80004ce:	f1c1 0720 	rsb	r7, r1, #32
 80004d2:	fa22 f807 	lsr.w	r8, r2, r7
 80004d6:	408b      	lsls	r3, r1
 80004d8:	fa05 f401 	lsl.w	r4, r5, r1
 80004dc:	ea48 0303 	orr.w	r3, r8, r3
 80004e0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004e4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004e8:	40fd      	lsrs	r5, r7
 80004ea:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ee:	fbb5 f9fc 	udiv	r9, r5, ip
 80004f2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004f6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004fa:	fa1f f883 	uxth.w	r8, r3
 80004fe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000502:	fb09 f408 	mul.w	r4, r9, r8
 8000506:	42ac      	cmp	r4, r5
 8000508:	fa02 f201 	lsl.w	r2, r2, r1
 800050c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000510:	d908      	bls.n	8000524 <__udivmoddi4+0x244>
 8000512:	18ed      	adds	r5, r5, r3
 8000514:	f109 30ff 	add.w	r0, r9, #4294967295
 8000518:	d243      	bcs.n	80005a2 <__udivmoddi4+0x2c2>
 800051a:	42ac      	cmp	r4, r5
 800051c:	d941      	bls.n	80005a2 <__udivmoddi4+0x2c2>
 800051e:	f1a9 0902 	sub.w	r9, r9, #2
 8000522:	441d      	add	r5, r3
 8000524:	1b2d      	subs	r5, r5, r4
 8000526:	fa1f fe8e 	uxth.w	lr, lr
 800052a:	fbb5 f0fc 	udiv	r0, r5, ip
 800052e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000532:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000536:	fb00 f808 	mul.w	r8, r0, r8
 800053a:	45a0      	cmp	r8, r4
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x26e>
 800053e:	18e4      	adds	r4, r4, r3
 8000540:	f100 35ff 	add.w	r5, r0, #4294967295
 8000544:	d229      	bcs.n	800059a <__udivmoddi4+0x2ba>
 8000546:	45a0      	cmp	r8, r4
 8000548:	d927      	bls.n	800059a <__udivmoddi4+0x2ba>
 800054a:	3802      	subs	r0, #2
 800054c:	441c      	add	r4, r3
 800054e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000552:	eba4 0408 	sub.w	r4, r4, r8
 8000556:	fba0 8902 	umull	r8, r9, r0, r2
 800055a:	454c      	cmp	r4, r9
 800055c:	46c6      	mov	lr, r8
 800055e:	464d      	mov	r5, r9
 8000560:	d315      	bcc.n	800058e <__udivmoddi4+0x2ae>
 8000562:	d012      	beq.n	800058a <__udivmoddi4+0x2aa>
 8000564:	b156      	cbz	r6, 800057c <__udivmoddi4+0x29c>
 8000566:	ebba 030e 	subs.w	r3, sl, lr
 800056a:	eb64 0405 	sbc.w	r4, r4, r5
 800056e:	fa04 f707 	lsl.w	r7, r4, r7
 8000572:	40cb      	lsrs	r3, r1
 8000574:	431f      	orrs	r7, r3
 8000576:	40cc      	lsrs	r4, r1
 8000578:	6037      	str	r7, [r6, #0]
 800057a:	6074      	str	r4, [r6, #4]
 800057c:	2100      	movs	r1, #0
 800057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000582:	4618      	mov	r0, r3
 8000584:	e6f8      	b.n	8000378 <__udivmoddi4+0x98>
 8000586:	4690      	mov	r8, r2
 8000588:	e6e0      	b.n	800034c <__udivmoddi4+0x6c>
 800058a:	45c2      	cmp	sl, r8
 800058c:	d2ea      	bcs.n	8000564 <__udivmoddi4+0x284>
 800058e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000592:	eb69 0503 	sbc.w	r5, r9, r3
 8000596:	3801      	subs	r0, #1
 8000598:	e7e4      	b.n	8000564 <__udivmoddi4+0x284>
 800059a:	4628      	mov	r0, r5
 800059c:	e7d7      	b.n	800054e <__udivmoddi4+0x26e>
 800059e:	4640      	mov	r0, r8
 80005a0:	e791      	b.n	80004c6 <__udivmoddi4+0x1e6>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e7be      	b.n	8000524 <__udivmoddi4+0x244>
 80005a6:	4601      	mov	r1, r0
 80005a8:	e778      	b.n	800049c <__udivmoddi4+0x1bc>
 80005aa:	3802      	subs	r0, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	e745      	b.n	800043c <__udivmoddi4+0x15c>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e708      	b.n	80003c6 <__udivmoddi4+0xe6>
 80005b4:	f1a8 0802 	sub.w	r8, r8, #2
 80005b8:	443d      	add	r5, r7
 80005ba:	e72b      	b.n	8000414 <__udivmoddi4+0x134>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c2:	4a0e      	ldr	r2, [pc, #56]	; (80005fc <HAL_InitTick+0x3c>)
 80005c4:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <HAL_InitTick+0x40>)
{
 80005c6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c8:	7818      	ldrb	r0, [r3, #0]
 80005ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ce:	fbb3 f3f0 	udiv	r3, r3, r0
 80005d2:	6810      	ldr	r0, [r2, #0]
 80005d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005d8:	f000 fabc 	bl	8000b54 <HAL_SYSTICK_Config>
 80005dc:	4604      	mov	r4, r0
 80005de:	b958      	cbnz	r0, 80005f8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e0:	2d0f      	cmp	r5, #15
 80005e2:	d809      	bhi.n	80005f8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e4:	4602      	mov	r2, r0
 80005e6:	4629      	mov	r1, r5
 80005e8:	f04f 30ff 	mov.w	r0, #4294967295
 80005ec:	f000 fa70 	bl	8000ad0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <HAL_InitTick+0x44>)
 80005f2:	4620      	mov	r0, r4
 80005f4:	601d      	str	r5, [r3, #0]
 80005f6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005f8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005fa:	bd38      	pop	{r3, r4, r5, pc}
 80005fc:	20000008 	.word	0x20000008
 8000600:	20000000 	.word	0x20000000
 8000604:	20000004 	.word	0x20000004

08000608 <HAL_Init>:
{
 8000608:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <HAL_Init+0x30>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000612:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800061a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000622:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000624:	2003      	movs	r0, #3
 8000626:	f000 fa41 	bl	8000aac <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800062a:	2000      	movs	r0, #0
 800062c:	f7ff ffc8 	bl	80005c0 <HAL_InitTick>
  HAL_MspInit();
 8000630:	f001 fabc 	bl	8001bac <HAL_MspInit>
}
 8000634:	2000      	movs	r0, #0
 8000636:	bd08      	pop	{r3, pc}
 8000638:	40023c00 	.word	0x40023c00

0800063c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800063c:	4a03      	ldr	r2, [pc, #12]	; (800064c <HAL_IncTick+0x10>)
 800063e:	4b04      	ldr	r3, [pc, #16]	; (8000650 <HAL_IncTick+0x14>)
 8000640:	6811      	ldr	r1, [r2, #0]
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	440b      	add	r3, r1
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000098 	.word	0x20000098
 8000650:	20000000 	.word	0x20000000

08000654 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000654:	4b01      	ldr	r3, [pc, #4]	; (800065c <HAL_GetTick+0x8>)
 8000656:	6818      	ldr	r0, [r3, #0]
}
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	20000098 	.word	0x20000098

08000660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000660:	b538      	push	{r3, r4, r5, lr}
 8000662:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000664:	f7ff fff6 	bl	8000654 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000668:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800066a:	bf1c      	itt	ne
 800066c:	4b05      	ldrne	r3, [pc, #20]	; (8000684 <HAL_Delay+0x24>)
 800066e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000670:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000672:	bf18      	it	ne
 8000674:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000676:	f7ff ffed 	bl	8000654 <HAL_GetTick>
 800067a:	1b40      	subs	r0, r0, r5
 800067c:	4284      	cmp	r4, r0
 800067e:	d8fa      	bhi.n	8000676 <HAL_Delay+0x16>
  {
  }
}
 8000680:	bd38      	pop	{r3, r4, r5, pc}
 8000682:	bf00      	nop
 8000684:	20000000 	.word	0x20000000

08000688 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000688:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800068a:	4604      	mov	r4, r0
 800068c:	2800      	cmp	r0, #0
 800068e:	f000 809b 	beq.w	80007c8 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000692:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000694:	b925      	cbnz	r5, 80006a0 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000696:	f001 faa9 	bl	8001bec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800069a:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800069c:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006a2:	06db      	lsls	r3, r3, #27
 80006a4:	f100 808e 	bmi.w	80007c4 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80006ae:	f023 0302 	bic.w	r3, r3, #2
 80006b2:	f043 0302 	orr.w	r3, r3, #2
 80006b6:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80006b8:	4b44      	ldr	r3, [pc, #272]	; (80007cc <HAL_ADC_Init+0x144>)
 80006ba:	685a      	ldr	r2, [r3, #4]
 80006bc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80006c0:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80006c2:	685a      	ldr	r2, [r3, #4]
 80006c4:	6861      	ldr	r1, [r4, #4]
 80006c6:	430a      	orrs	r2, r1
 80006c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80006ca:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80006cc:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80006ce:	685a      	ldr	r2, [r3, #4]
 80006d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80006d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80006d6:	685a      	ldr	r2, [r3, #4]
 80006d8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80006dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80006de:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80006e0:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80006e2:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80006e6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80006e8:	685a      	ldr	r2, [r3, #4]
 80006ea:	430a      	orrs	r2, r1
 80006ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80006ee:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80006f0:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80006f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80006f8:	689a      	ldr	r2, [r3, #8]
 80006fa:	430a      	orrs	r2, r1
 80006fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80006fe:	4934      	ldr	r1, [pc, #208]	; (80007d0 <HAL_ADC_Init+0x148>)
 8000700:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000702:	428a      	cmp	r2, r1
 8000704:	d052      	beq.n	80007ac <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000706:	6899      	ldr	r1, [r3, #8]
 8000708:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 800070c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800070e:	6899      	ldr	r1, [r3, #8]
 8000710:	430a      	orrs	r2, r1
 8000712:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000714:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000716:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000718:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800071c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800071e:	689a      	ldr	r2, [r3, #8]
 8000720:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000722:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000724:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000726:	7e21      	ldrb	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000728:	f022 0202 	bic.w	r2, r2, #2
 800072c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800072e:	689a      	ldr	r2, [r3, #8]
 8000730:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000734:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000736:	f894 2020 	ldrb.w	r2, [r4, #32]
 800073a:	2a00      	cmp	r2, #0
 800073c:	d03e      	beq.n	80007bc <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800073e:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000740:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000742:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000746:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000748:	685a      	ldr	r2, [r3, #4]
 800074a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800074e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000750:	685a      	ldr	r2, [r3, #4]
 8000752:	3901      	subs	r1, #1
 8000754:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000758:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800075a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800075c:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800075e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000762:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000766:	3901      	subs	r1, #1
 8000768:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800076c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800076e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000770:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000774:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000778:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800077a:	689a      	ldr	r2, [r3, #8]
 800077c:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000780:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000782:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000784:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800078a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800078c:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800078e:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000790:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000794:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000796:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000798:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800079a:	f023 0303 	bic.w	r3, r3, #3
 800079e:	f043 0301 	orr.w	r3, r3, #1
 80007a2:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80007a4:	2300      	movs	r3, #0
 80007a6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 80007aa:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80007ac:	689a      	ldr	r2, [r3, #8]
 80007ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80007b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80007b4:	689a      	ldr	r2, [r3, #8]
 80007b6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80007ba:	e7b2      	b.n	8000722 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80007bc:	685a      	ldr	r2, [r3, #4]
 80007be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80007c2:	e7c9      	b.n	8000758 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 80007c4:	2001      	movs	r0, #1
 80007c6:	e7ed      	b.n	80007a4 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 80007c8:	2001      	movs	r0, #1
}
 80007ca:	bd38      	pop	{r3, r4, r5, pc}
 80007cc:	40012300 	.word	0x40012300
 80007d0:	0f000001 	.word	0x0f000001

080007d4 <HAL_ADC_Start>:
{
 80007d4:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80007d6:	2300      	movs	r3, #0
 80007d8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80007da:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d061      	beq.n	80008a6 <HAL_ADC_Start+0xd2>
 80007e2:	2301      	movs	r3, #1
 80007e4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80007e8:	6803      	ldr	r3, [r0, #0]
 80007ea:	689a      	ldr	r2, [r3, #8]
 80007ec:	07d1      	lsls	r1, r2, #31
 80007ee:	d505      	bpl.n	80007fc <HAL_ADC_Start+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80007f0:	689a      	ldr	r2, [r3, #8]
 80007f2:	07d2      	lsls	r2, r2, #31
 80007f4:	d414      	bmi.n	8000820 <HAL_ADC_Start+0x4c>
  return HAL_OK;
 80007f6:	2000      	movs	r0, #0
}
 80007f8:	b002      	add	sp, #8
 80007fa:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 80007fc:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80007fe:	492b      	ldr	r1, [pc, #172]	; (80008ac <HAL_ADC_Start+0xd8>)
    __HAL_ADC_ENABLE(hadc);
 8000800:	f042 0201 	orr.w	r2, r2, #1
 8000804:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000806:	4a2a      	ldr	r2, [pc, #168]	; (80008b0 <HAL_ADC_Start+0xdc>)
 8000808:	6812      	ldr	r2, [r2, #0]
 800080a:	fbb2 f2f1 	udiv	r2, r2, r1
 800080e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 8000812:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 8000814:	9a01      	ldr	r2, [sp, #4]
 8000816:	2a00      	cmp	r2, #0
 8000818:	d0ea      	beq.n	80007f0 <HAL_ADC_Start+0x1c>
      counter--;
 800081a:	9a01      	ldr	r2, [sp, #4]
 800081c:	3a01      	subs	r2, #1
 800081e:	e7f8      	b.n	8000812 <HAL_ADC_Start+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 8000820:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000822:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000826:	f022 0201 	bic.w	r2, r2, #1
 800082a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800082e:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000830:	685a      	ldr	r2, [r3, #4]
 8000832:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000834:	bf41      	itttt	mi
 8000836:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 8000838:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 800083c:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000840:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000842:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000844:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000848:	bf1c      	itt	ne
 800084a:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 800084c:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000850:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8000852:	2200      	movs	r2, #0
 8000854:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000858:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800085c:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800085e:	4a15      	ldr	r2, [pc, #84]	; (80008b4 <HAL_ADC_Start+0xe0>)
 8000860:	6851      	ldr	r1, [r2, #4]
 8000862:	f011 0f1f 	tst.w	r1, #31
 8000866:	4914      	ldr	r1, [pc, #80]	; (80008b8 <HAL_ADC_Start+0xe4>)
 8000868:	d11a      	bne.n	80008a0 <HAL_ADC_Start+0xcc>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800086a:	428b      	cmp	r3, r1
 800086c:	d006      	beq.n	800087c <HAL_ADC_Start+0xa8>
 800086e:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8000872:	428b      	cmp	r3, r1
 8000874:	d10b      	bne.n	800088e <HAL_ADC_Start+0xba>
 8000876:	6852      	ldr	r2, [r2, #4]
 8000878:	06d2      	lsls	r2, r2, #27
 800087a:	d1bc      	bne.n	80007f6 <HAL_ADC_Start+0x22>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800087c:	6898      	ldr	r0, [r3, #8]
 800087e:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8000882:	d1b8      	bne.n	80007f6 <HAL_ADC_Start+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000884:	689a      	ldr	r2, [r3, #8]
 8000886:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	e7b4      	b.n	80007f8 <HAL_ADC_Start+0x24>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800088e:	490b      	ldr	r1, [pc, #44]	; (80008bc <HAL_ADC_Start+0xe8>)
 8000890:	428b      	cmp	r3, r1
 8000892:	d1b0      	bne.n	80007f6 <HAL_ADC_Start+0x22>
 8000894:	6852      	ldr	r2, [r2, #4]
 8000896:	f002 021f 	and.w	r2, r2, #31
 800089a:	2a0f      	cmp	r2, #15
 800089c:	d9ee      	bls.n	800087c <HAL_ADC_Start+0xa8>
 800089e:	e7aa      	b.n	80007f6 <HAL_ADC_Start+0x22>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80008a0:	428b      	cmp	r3, r1
 80008a2:	d1a8      	bne.n	80007f6 <HAL_ADC_Start+0x22>
 80008a4:	e7ea      	b.n	800087c <HAL_ADC_Start+0xa8>
  __HAL_LOCK(hadc);
 80008a6:	2002      	movs	r0, #2
 80008a8:	e7a6      	b.n	80007f8 <HAL_ADC_Start+0x24>
 80008aa:	bf00      	nop
 80008ac:	000f4240 	.word	0x000f4240
 80008b0:	20000008 	.word	0x20000008
 80008b4:	40012300 	.word	0x40012300
 80008b8:	40012000 	.word	0x40012000
 80008bc:	40012200 	.word	0x40012200

080008c0 <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80008c0:	6803      	ldr	r3, [r0, #0]
 80008c2:	689a      	ldr	r2, [r3, #8]
{
 80008c4:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80008c6:	0556      	lsls	r6, r2, #21
{
 80008c8:	4604      	mov	r4, r0
 80008ca:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80008cc:	d50b      	bpl.n	80008e6 <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80008ce:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80008d0:	05d8      	lsls	r0, r3, #23
 80008d2:	d508      	bpl.n	80008e6 <HAL_ADC_PollForConversion+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008d6:	f043 0320 	orr.w	r3, r3, #32
 80008da:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 80008dc:	2300      	movs	r3, #0
 80008de:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80008e2:	2001      	movs	r0, #1
 80008e4:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 80008e6:	f7ff feb5 	bl	8000654 <HAL_GetTick>
 80008ea:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80008ec:	6823      	ldr	r3, [r4, #0]
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	0792      	lsls	r2, r2, #30
 80008f2:	d50c      	bpl.n	800090e <HAL_ADC_PollForConversion+0x4e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80008f4:	f06f 0212 	mvn.w	r2, #18
 80008f8:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80008fa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80008fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000900:	6422      	str	r2, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000902:	689a      	ldr	r2, [r3, #8]
 8000904:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000908:	d013      	beq.n	8000932 <HAL_ADC_PollForConversion+0x72>
  return HAL_OK;
 800090a:	2000      	movs	r0, #0
 800090c:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 800090e:	1c69      	adds	r1, r5, #1
 8000910:	d0ed      	beq.n	80008ee <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000912:	b945      	cbnz	r5, 8000926 <HAL_ADC_PollForConversion+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000914:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000916:	f043 0304 	orr.w	r3, r3, #4
 800091a:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 800091c:	2300      	movs	r3, #0
 800091e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 8000922:	2003      	movs	r0, #3
 8000924:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000926:	f7ff fe95 	bl	8000654 <HAL_GetTick>
 800092a:	1b80      	subs	r0, r0, r6
 800092c:	4285      	cmp	r5, r0
 800092e:	d2dd      	bcs.n	80008ec <HAL_ADC_PollForConversion+0x2c>
 8000930:	e7f0      	b.n	8000914 <HAL_ADC_PollForConversion+0x54>
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000932:	7e22      	ldrb	r2, [r4, #24]
 8000934:	2a00      	cmp	r2, #0
 8000936:	d1e8      	bne.n	800090a <HAL_ADC_PollForConversion+0x4a>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800093a:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800093e:	d002      	beq.n	8000946 <HAL_ADC_PollForConversion+0x86>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000940:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000942:	055b      	lsls	r3, r3, #21
 8000944:	d4e1      	bmi.n	800090a <HAL_ADC_PollForConversion+0x4a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000946:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000948:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800094c:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800094e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000950:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8000954:	d1d9      	bne.n	800090a <HAL_ADC_PollForConversion+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000956:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6423      	str	r3, [r4, #64]	; 0x40
}
 800095e:	bd70      	pop	{r4, r5, r6, pc}

08000960 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8000960:	6803      	ldr	r3, [r0, #0]
 8000962:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8000964:	4770      	bx	lr
	...

08000968 <HAL_ADC_ConfigChannel>:
{
 8000968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 800096a:	2300      	movs	r3, #0
 800096c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800096e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000972:	2b01      	cmp	r3, #1
 8000974:	d06e      	beq.n	8000a54 <HAL_ADC_ConfigChannel+0xec>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000976:	680d      	ldr	r5, [r1, #0]
 8000978:	6804      	ldr	r4, [r0, #0]
 800097a:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 800097c:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 800097e:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8000980:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8000984:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000986:	d92a      	bls.n	80009de <HAL_ADC_ConfigChannel+0x76>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000988:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800098c:	68e7      	ldr	r7, [r4, #12]
 800098e:	3b1e      	subs	r3, #30
 8000990:	f04f 0e07 	mov.w	lr, #7
 8000994:	fa0e fe03 	lsl.w	lr, lr, r3
 8000998:	ea27 070e 	bic.w	r7, r7, lr
 800099c:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800099e:	68e7      	ldr	r7, [r4, #12]
 80009a0:	fa02 f303 	lsl.w	r3, r2, r3
 80009a4:	433b      	orrs	r3, r7
 80009a6:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 80009a8:	684a      	ldr	r2, [r1, #4]
 80009aa:	2a06      	cmp	r2, #6
 80009ac:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80009b0:	d825      	bhi.n	80009fe <HAL_ADC_ConfigChannel+0x96>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80009b2:	4413      	add	r3, r2
 80009b4:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80009b6:	1f59      	subs	r1, r3, #5
 80009b8:	231f      	movs	r3, #31
 80009ba:	408b      	lsls	r3, r1
 80009bc:	ea27 0303 	bic.w	r3, r7, r3
 80009c0:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80009c2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80009c4:	fa06 f101 	lsl.w	r1, r6, r1
 80009c8:	4311      	orrs	r1, r2
 80009ca:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80009cc:	4b32      	ldr	r3, [pc, #200]	; (8000a98 <HAL_ADC_ConfigChannel+0x130>)
 80009ce:	429c      	cmp	r4, r3
 80009d0:	d034      	beq.n	8000a3c <HAL_ADC_ConfigChannel+0xd4>
  __HAL_UNLOCK(hadc);
 80009d2:	2300      	movs	r3, #0
 80009d4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80009d8:	4618      	mov	r0, r3
}
 80009da:	b003      	add	sp, #12
 80009dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80009de:	6927      	ldr	r7, [r4, #16]
 80009e0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80009e4:	f04f 0e07 	mov.w	lr, #7
 80009e8:	fa0e fe03 	lsl.w	lr, lr, r3
 80009ec:	ea27 070e 	bic.w	r7, r7, lr
 80009f0:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80009f2:	6927      	ldr	r7, [r4, #16]
 80009f4:	fa02 f303 	lsl.w	r3, r2, r3
 80009f8:	433b      	orrs	r3, r7
 80009fa:	6123      	str	r3, [r4, #16]
 80009fc:	e7d4      	b.n	80009a8 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 80009fe:	2a0c      	cmp	r2, #12
 8000a00:	d80e      	bhi.n	8000a20 <HAL_ADC_ConfigChannel+0xb8>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000a02:	4413      	add	r3, r2
 8000a04:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000a06:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8000a0a:	231f      	movs	r3, #31
 8000a0c:	4093      	lsls	r3, r2
 8000a0e:	ea21 0303 	bic.w	r3, r1, r3
 8000a12:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000a14:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a16:	fa06 f202 	lsl.w	r2, r6, r2
 8000a1a:	431a      	orrs	r2, r3
 8000a1c:	6322      	str	r2, [r4, #48]	; 0x30
 8000a1e:	e7d5      	b.n	80009cc <HAL_ADC_ConfigChannel+0x64>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000a20:	4413      	add	r3, r2
 8000a22:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000a24:	3b41      	subs	r3, #65	; 0x41
 8000a26:	221f      	movs	r2, #31
 8000a28:	409a      	lsls	r2, r3
 8000a2a:	ea21 0202 	bic.w	r2, r1, r2
 8000a2e:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000a30:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000a32:	fa06 f103 	lsl.w	r1, r6, r3
 8000a36:	4311      	orrs	r1, r2
 8000a38:	62e1      	str	r1, [r4, #44]	; 0x2c
 8000a3a:	e7c7      	b.n	80009cc <HAL_ADC_ConfigChannel+0x64>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000a3c:	2d12      	cmp	r5, #18
 8000a3e:	d10b      	bne.n	8000a58 <HAL_ADC_ConfigChannel+0xf0>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000a40:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <HAL_ADC_ConfigChannel+0x134>)
 8000a42:	685a      	ldr	r2, [r3, #4]
 8000a44:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000a48:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000a4a:	685a      	ldr	r2, [r3, #4]
 8000a4c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	e7be      	b.n	80009d2 <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 8000a54:	2002      	movs	r0, #2
 8000a56:	e7c0      	b.n	80009da <HAL_ADC_ConfigChannel+0x72>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <HAL_ADC_ConfigChannel+0x138>)
 8000a5a:	429d      	cmp	r5, r3
 8000a5c:	d001      	beq.n	8000a62 <HAL_ADC_ConfigChannel+0xfa>
 8000a5e:	2d11      	cmp	r5, #17
 8000a60:	d1b7      	bne.n	80009d2 <HAL_ADC_ConfigChannel+0x6a>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <HAL_ADC_ConfigChannel+0x134>)
 8000a64:	685a      	ldr	r2, [r3, #4]
 8000a66:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8000a6a:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000a6c:	685a      	ldr	r2, [r3, #4]
 8000a6e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000a72:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000a74:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <HAL_ADC_ConfigChannel+0x138>)
 8000a76:	429d      	cmp	r5, r3
 8000a78:	d1ab      	bne.n	80009d2 <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <HAL_ADC_ConfigChannel+0x13c>)
 8000a7c:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <HAL_ADC_ConfigChannel+0x140>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	fbb3 f2f2 	udiv	r2, r3, r2
 8000a84:	230a      	movs	r3, #10
 8000a86:	4353      	muls	r3, r2
        counter--;
 8000a88:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8000a8a:	9b01      	ldr	r3, [sp, #4]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d0a0      	beq.n	80009d2 <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 8000a90:	9b01      	ldr	r3, [sp, #4]
 8000a92:	3b01      	subs	r3, #1
 8000a94:	e7f8      	b.n	8000a88 <HAL_ADC_ConfigChannel+0x120>
 8000a96:	bf00      	nop
 8000a98:	40012000 	.word	0x40012000
 8000a9c:	40012300 	.word	0x40012300
 8000aa0:	10000012 	.word	0x10000012
 8000aa4:	20000008 	.word	0x20000008
 8000aa8:	000f4240 	.word	0x000f4240

08000aac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aac:	4a07      	ldr	r2, [pc, #28]	; (8000acc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000aae:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ab4:	041b      	lsls	r3, r3, #16
 8000ab6:	0c1b      	lsrs	r3, r3, #16
 8000ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000abc:	0200      	lsls	r0, r0, #8
 8000abe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000ac6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000ac8:	60d3      	str	r3, [r2, #12]
 8000aca:	4770      	bx	lr
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad0:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ad2:	b530      	push	{r4, r5, lr}
 8000ad4:	68dc      	ldr	r4, [r3, #12]
 8000ad6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ada:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ade:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae0:	2b04      	cmp	r3, #4
 8000ae2:	bf28      	it	cs
 8000ae4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ae6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae8:	f04f 0501 	mov.w	r5, #1
 8000aec:	fa05 f303 	lsl.w	r3, r5, r3
 8000af0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af4:	bf8c      	ite	hi
 8000af6:	3c03      	subhi	r4, #3
 8000af8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000afa:	4019      	ands	r1, r3
 8000afc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000afe:	fa05 f404 	lsl.w	r4, r5, r4
 8000b02:	3c01      	subs	r4, #1
 8000b04:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000b06:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b08:	ea42 0201 	orr.w	r2, r2, r1
 8000b0c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b10:	bfad      	iteet	ge
 8000b12:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b16:	f000 000f 	andlt.w	r0, r0, #15
 8000b1a:	4b06      	ldrlt	r3, [pc, #24]	; (8000b34 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b20:	bfb5      	itete	lt
 8000b22:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b24:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b26:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b28:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000b2c:	bd30      	pop	{r4, r5, pc}
 8000b2e:	bf00      	nop
 8000b30:	e000ed00 	.word	0xe000ed00
 8000b34:	e000ed14 	.word	0xe000ed14

08000b38 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000b38:	2800      	cmp	r0, #0
 8000b3a:	db08      	blt.n	8000b4e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b3c:	0942      	lsrs	r2, r0, #5
 8000b3e:	2301      	movs	r3, #1
 8000b40:	f000 001f 	and.w	r0, r0, #31
 8000b44:	fa03 f000 	lsl.w	r0, r3, r0
 8000b48:	4b01      	ldr	r3, [pc, #4]	; (8000b50 <HAL_NVIC_EnableIRQ+0x18>)
 8000b4a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000b4e:	4770      	bx	lr
 8000b50:	e000e100 	.word	0xe000e100

08000b54 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b54:	3801      	subs	r0, #1
 8000b56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b5a:	d20a      	bcs.n	8000b72 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5e:	4a07      	ldr	r2, [pc, #28]	; (8000b7c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b60:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b62:	21f0      	movs	r1, #240	; 0xf0
 8000b64:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b68:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b6c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b72:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000e010 	.word	0xe000e010
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000b80:	6803      	ldr	r3, [r0, #0]
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000b88:	f023 0303 	bic.w	r3, r3, #3
 8000b8c:	2118      	movs	r1, #24
 8000b8e:	3a10      	subs	r2, #16
 8000b90:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000b94:	4904      	ldr	r1, [pc, #16]	; (8000ba8 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000b96:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000b98:	bf88      	it	hi
 8000b9a:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000b9c:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000b9e:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000ba0:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8000ba2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	08002c94 	.word	0x08002c94

08000bac <HAL_DMA_Init>:
{
 8000bac:	b570      	push	{r4, r5, r6, lr}
 8000bae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000bb0:	f7ff fd50 	bl	8000654 <HAL_GetTick>
 8000bb4:	4605      	mov	r5, r0
  if(hdma == NULL)
 8000bb6:	2c00      	cmp	r4, #0
 8000bb8:	d071      	beq.n	8000c9e <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8000bba:	2300      	movs	r3, #0
 8000bbc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8000bc0:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000bc8:	6813      	ldr	r3, [r2, #0]
 8000bca:	f023 0301 	bic.w	r3, r3, #1
 8000bce:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000bd0:	6821      	ldr	r1, [r4, #0]
 8000bd2:	680b      	ldr	r3, [r1, #0]
 8000bd4:	07d8      	lsls	r0, r3, #31
 8000bd6:	d43c      	bmi.n	8000c52 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8000bd8:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000bda:	4d32      	ldr	r5, [pc, #200]	; (8000ca4 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000bdc:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bde:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000be0:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000be2:	68a3      	ldr	r3, [r4, #8]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	68e2      	ldr	r2, [r4, #12]
 8000be8:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bea:	6922      	ldr	r2, [r4, #16]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	6962      	ldr	r2, [r4, #20]
 8000bf0:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bf2:	69e2      	ldr	r2, [r4, #28]
 8000bf4:	4303      	orrs	r3, r0
 8000bf6:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bf8:	6a22      	ldr	r2, [r4, #32]
 8000bfa:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000bfc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000bfe:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000c00:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000c04:	bf01      	itttt	eq
 8000c06:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8000c08:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8000c0a:	4335      	orreq	r5, r6
 8000c0c:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8000c0e:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8000c10:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000c12:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000c14:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000c18:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000c1c:	d10b      	bne.n	8000c36 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8000c1e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000c20:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000c22:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000c24:	b13d      	cbz	r5, 8000c36 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000c26:	b9f8      	cbnz	r0, 8000c68 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8000c28:	2a01      	cmp	r2, #1
 8000c2a:	d02d      	beq.n	8000c88 <HAL_DMA_Init+0xdc>
 8000c2c:	d301      	bcc.n	8000c32 <HAL_DMA_Init+0x86>
 8000c2e:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000c30:	d101      	bne.n	8000c36 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000c32:	01ea      	lsls	r2, r5, #7
 8000c34:	d42b      	bmi.n	8000c8e <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8000c36:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000c38:	4620      	mov	r0, r4
 8000c3a:	f7ff ffa1 	bl	8000b80 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c3e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000c40:	233f      	movs	r3, #63	; 0x3f
 8000c42:	4093      	lsls	r3, r2
 8000c44:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c46:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000c48:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c4a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000c4c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000c50:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000c52:	f7ff fcff 	bl	8000654 <HAL_GetTick>
 8000c56:	1b40      	subs	r0, r0, r5
 8000c58:	2805      	cmp	r0, #5
 8000c5a:	d9b9      	bls.n	8000bd0 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000c5c:	2320      	movs	r3, #32
 8000c5e:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000c60:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8000c62:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000c66:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000c68:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000c6c:	d113      	bne.n	8000c96 <HAL_DMA_Init+0xea>
    switch (tmp)
 8000c6e:	2a03      	cmp	r2, #3
 8000c70:	d8e1      	bhi.n	8000c36 <HAL_DMA_Init+0x8a>
 8000c72:	a001      	add	r0, pc, #4	; (adr r0, 8000c78 <HAL_DMA_Init+0xcc>)
 8000c74:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000c78:	08000c8f 	.word	0x08000c8f
 8000c7c:	08000c33 	.word	0x08000c33
 8000c80:	08000c8f 	.word	0x08000c8f
 8000c84:	08000c89 	.word	0x08000c89
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000c88:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000c8c:	d1d3      	bne.n	8000c36 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000c8e:	2340      	movs	r3, #64	; 0x40
 8000c90:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000c92:	2001      	movs	r0, #1
 8000c94:	e7e5      	b.n	8000c62 <HAL_DMA_Init+0xb6>
    switch (tmp)
 8000c96:	2a02      	cmp	r2, #2
 8000c98:	d9f9      	bls.n	8000c8e <HAL_DMA_Init+0xe2>
 8000c9a:	2a03      	cmp	r2, #3
 8000c9c:	e7c8      	b.n	8000c30 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	bd70      	pop	{r4, r5, r6, pc}
 8000ca2:	bf00      	nop
 8000ca4:	f010803f 	.word	0xf010803f

08000ca8 <HAL_DMA_IRQHandler>:
{
 8000ca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8000caa:	2300      	movs	r3, #0
 8000cac:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000cae:	4b5a      	ldr	r3, [pc, #360]	; (8000e18 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000cb0:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8000cb2:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000cb4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000cb6:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000cb8:	2208      	movs	r2, #8
 8000cba:	409a      	lsls	r2, r3
 8000cbc:	4216      	tst	r6, r2
{
 8000cbe:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000cc0:	d00c      	beq.n	8000cdc <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000cc2:	6801      	ldr	r1, [r0, #0]
 8000cc4:	6808      	ldr	r0, [r1, #0]
 8000cc6:	0740      	lsls	r0, r0, #29
 8000cc8:	d508      	bpl.n	8000cdc <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000cca:	6808      	ldr	r0, [r1, #0]
 8000ccc:	f020 0004 	bic.w	r0, r0, #4
 8000cd0:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000cd2:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000cd4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000cd6:	f042 0201 	orr.w	r2, r2, #1
 8000cda:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	409a      	lsls	r2, r3
 8000ce0:	4216      	tst	r6, r2
 8000ce2:	d008      	beq.n	8000cf6 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000ce4:	6821      	ldr	r1, [r4, #0]
 8000ce6:	6949      	ldr	r1, [r1, #20]
 8000ce8:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000cea:	bf41      	itttt	mi
 8000cec:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000cee:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000cf0:	f042 0202 	orrmi.w	r2, r2, #2
 8000cf4:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000cf6:	2204      	movs	r2, #4
 8000cf8:	409a      	lsls	r2, r3
 8000cfa:	4216      	tst	r6, r2
 8000cfc:	d008      	beq.n	8000d10 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000cfe:	6821      	ldr	r1, [r4, #0]
 8000d00:	6809      	ldr	r1, [r1, #0]
 8000d02:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000d04:	bf41      	itttt	mi
 8000d06:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000d08:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000d0a:	f042 0204 	orrmi.w	r2, r2, #4
 8000d0e:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000d10:	2210      	movs	r2, #16
 8000d12:	409a      	lsls	r2, r3
 8000d14:	4216      	tst	r6, r2
 8000d16:	d010      	beq.n	8000d3a <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000d18:	6823      	ldr	r3, [r4, #0]
 8000d1a:	6819      	ldr	r1, [r3, #0]
 8000d1c:	0709      	lsls	r1, r1, #28
 8000d1e:	d50c      	bpl.n	8000d3a <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000d20:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	0350      	lsls	r0, r2, #13
 8000d26:	d535      	bpl.n	8000d94 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	0319      	lsls	r1, r3, #12
 8000d2c:	d401      	bmi.n	8000d32 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8000d2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d30:	e000      	b.n	8000d34 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000d32:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000d34:	b10b      	cbz	r3, 8000d3a <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8000d36:	4620      	mov	r0, r4
 8000d38:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000d3a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000d3c:	2220      	movs	r2, #32
 8000d3e:	408a      	lsls	r2, r1
 8000d40:	4216      	tst	r6, r2
 8000d42:	d038      	beq.n	8000db6 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000d44:	6823      	ldr	r3, [r4, #0]
 8000d46:	6818      	ldr	r0, [r3, #0]
 8000d48:	06c6      	lsls	r6, r0, #27
 8000d4a:	d534      	bpl.n	8000db6 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000d4c:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000d4e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000d52:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d54:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000d56:	d125      	bne.n	8000da4 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d58:	f022 0216 	bic.w	r2, r2, #22
 8000d5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d5e:	695a      	ldr	r2, [r3, #20]
 8000d60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d64:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d66:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000d68:	b90a      	cbnz	r2, 8000d6e <HAL_DMA_IRQHandler+0xc6>
 8000d6a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000d6c:	b11a      	cbz	r2, 8000d76 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	f022 0208 	bic.w	r2, r2, #8
 8000d74:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d76:	233f      	movs	r3, #63	; 0x3f
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000d82:	2301      	movs	r3, #1
 8000d84:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000d88:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8000d8a:	b10b      	cbz	r3, 8000d90 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8000d8c:	4620      	mov	r0, r4
 8000d8e:	4798      	blx	r3
}
 8000d90:	b003      	add	sp, #12
 8000d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d98:	bf5e      	ittt	pl
 8000d9a:	681a      	ldrpl	r2, [r3, #0]
 8000d9c:	f022 0208 	bicpl.w	r2, r2, #8
 8000da0:	601a      	strpl	r2, [r3, #0]
 8000da2:	e7c4      	b.n	8000d2e <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000da4:	0350      	lsls	r0, r2, #13
 8000da6:	d528      	bpl.n	8000dfa <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	0319      	lsls	r1, r3, #12
 8000dac:	d432      	bmi.n	8000e14 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8000dae:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000db0:	b10b      	cbz	r3, 8000db6 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8000db2:	4620      	mov	r0, r4
 8000db4:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000db6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d0e9      	beq.n	8000d90 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000dbc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000dbe:	07da      	lsls	r2, r3, #31
 8000dc0:	d519      	bpl.n	8000df6 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000dc2:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8000dc4:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8000dc6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000dca:	6813      	ldr	r3, [r2, #0]
 8000dcc:	f023 0301 	bic.w	r3, r3, #1
 8000dd0:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000dd2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000dd6:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8000dda:	9b01      	ldr	r3, [sp, #4]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	429f      	cmp	r7, r3
 8000de0:	9301      	str	r3, [sp, #4]
 8000de2:	d302      	bcc.n	8000dea <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000de4:	6813      	ldr	r3, [r2, #0]
 8000de6:	07db      	lsls	r3, r3, #31
 8000de8:	d4f7      	bmi.n	8000dda <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8000dea:	2300      	movs	r3, #0
 8000dec:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000df0:	2301      	movs	r3, #1
 8000df2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000df6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000df8:	e7c7      	b.n	8000d8a <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000e00:	d108      	bne.n	8000e14 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000e02:	6819      	ldr	r1, [r3, #0]
 8000e04:	f021 0110 	bic.w	r1, r1, #16
 8000e08:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000e0a:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000e0c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000e10:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000e14:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e16:	e7cb      	b.n	8000db0 <HAL_DMA_IRQHandler+0x108>
 8000e18:	20000008 	.word	0x20000008

08000e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e20:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e22:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e24:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8000fc8 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e28:	4a65      	ldr	r2, [pc, #404]	; (8000fc0 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e2a:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8000fcc <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e2e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e30:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000e32:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e36:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000e38:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e3c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000e40:	45b6      	cmp	lr, r6
 8000e42:	f040 80aa 	bne.w	8000f9a <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e46:	684c      	ldr	r4, [r1, #4]
 8000e48:	f024 0710 	bic.w	r7, r4, #16
 8000e4c:	2f02      	cmp	r7, #2
 8000e4e:	d116      	bne.n	8000e7e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000e50:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000e54:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e58:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000e5c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e60:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000e64:	f04f 0c0f 	mov.w	ip, #15
 8000e68:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000e6c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e70:	690d      	ldr	r5, [r1, #16]
 8000e72:	fa05 f50b 	lsl.w	r5, r5, fp
 8000e76:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000e7a:	f8ca 5020 	str.w	r5, [sl, #32]
 8000e7e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e82:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000e84:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e88:	fa05 f50a 	lsl.w	r5, r5, sl
 8000e8c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e8e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e92:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e96:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e9a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e9c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ea0:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000ea2:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ea6:	d811      	bhi.n	8000ecc <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000ea8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eaa:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eae:	68cf      	ldr	r7, [r1, #12]
 8000eb0:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000eb4:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000eb8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000eba:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ebc:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ec0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000ec4:	409f      	lsls	r7, r3
 8000ec6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000eca:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000ecc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ece:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ed0:	688f      	ldr	r7, [r1, #8]
 8000ed2:	fa07 f70a 	lsl.w	r7, r7, sl
 8000ed6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000ed8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eda:	00e5      	lsls	r5, r4, #3
 8000edc:	d55d      	bpl.n	8000f9a <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ede:	f04f 0b00 	mov.w	fp, #0
 8000ee2:	f8cd b00c 	str.w	fp, [sp, #12]
 8000ee6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eea:	4d36      	ldr	r5, [pc, #216]	; (8000fc4 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eec:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000ef0:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000ef4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000ef8:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000efc:	9703      	str	r7, [sp, #12]
 8000efe:	9f03      	ldr	r7, [sp, #12]
 8000f00:	f023 0703 	bic.w	r7, r3, #3
 8000f04:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000f08:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f0c:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000f10:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f14:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000f18:	f04f 0e0f 	mov.w	lr, #15
 8000f1c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f20:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f22:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f26:	d03f      	beq.n	8000fa8 <HAL_GPIO_Init+0x18c>
 8000f28:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f2c:	42a8      	cmp	r0, r5
 8000f2e:	d03d      	beq.n	8000fac <HAL_GPIO_Init+0x190>
 8000f30:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f34:	42a8      	cmp	r0, r5
 8000f36:	d03b      	beq.n	8000fb0 <HAL_GPIO_Init+0x194>
 8000f38:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f3c:	42a8      	cmp	r0, r5
 8000f3e:	d039      	beq.n	8000fb4 <HAL_GPIO_Init+0x198>
 8000f40:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f44:	42a8      	cmp	r0, r5
 8000f46:	d037      	beq.n	8000fb8 <HAL_GPIO_Init+0x19c>
 8000f48:	4548      	cmp	r0, r9
 8000f4a:	d037      	beq.n	8000fbc <HAL_GPIO_Init+0x1a0>
 8000f4c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000f50:	42a8      	cmp	r0, r5
 8000f52:	bf14      	ite	ne
 8000f54:	2507      	movne	r5, #7
 8000f56:	2506      	moveq	r5, #6
 8000f58:	fa05 f50c 	lsl.w	r5, r5, ip
 8000f5c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f60:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000f62:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000f64:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f66:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000f6a:	bf0c      	ite	eq
 8000f6c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000f6e:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000f70:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000f72:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f74:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000f78:	bf0c      	ite	eq
 8000f7a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000f7c:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000f7e:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f80:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f82:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000f86:	bf0c      	ite	eq
 8000f88:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000f8a:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000f8c:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000f8e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f90:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000f92:	bf54      	ite	pl
 8000f94:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000f96:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000f98:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	2b10      	cmp	r3, #16
 8000f9e:	f47f af48 	bne.w	8000e32 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000fa2:	b005      	add	sp, #20
 8000fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fa8:	465d      	mov	r5, fp
 8000faa:	e7d5      	b.n	8000f58 <HAL_GPIO_Init+0x13c>
 8000fac:	2501      	movs	r5, #1
 8000fae:	e7d3      	b.n	8000f58 <HAL_GPIO_Init+0x13c>
 8000fb0:	2502      	movs	r5, #2
 8000fb2:	e7d1      	b.n	8000f58 <HAL_GPIO_Init+0x13c>
 8000fb4:	2503      	movs	r5, #3
 8000fb6:	e7cf      	b.n	8000f58 <HAL_GPIO_Init+0x13c>
 8000fb8:	2504      	movs	r5, #4
 8000fba:	e7cd      	b.n	8000f58 <HAL_GPIO_Init+0x13c>
 8000fbc:	2505      	movs	r5, #5
 8000fbe:	e7cb      	b.n	8000f58 <HAL_GPIO_Init+0x13c>
 8000fc0:	40013c00 	.word	0x40013c00
 8000fc4:	40020000 	.word	0x40020000
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40021400 	.word	0x40021400

08000fd0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fd0:	b10a      	cbz	r2, 8000fd6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fd2:	6181      	str	r1, [r0, #24]
 8000fd4:	4770      	bx	lr
 8000fd6:	0409      	lsls	r1, r1, #16
 8000fd8:	e7fb      	b.n	8000fd2 <HAL_GPIO_WritePin+0x2>
	...

08000fdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fe0:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	b910      	cbnz	r0, 8000fec <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000fec:	4b44      	ldr	r3, [pc, #272]	; (8001100 <HAL_RCC_ClockConfig+0x124>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	f002 020f 	and.w	r2, r2, #15
 8000ff4:	428a      	cmp	r2, r1
 8000ff6:	d328      	bcc.n	800104a <HAL_RCC_ClockConfig+0x6e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ff8:	6821      	ldr	r1, [r4, #0]
 8000ffa:	078f      	lsls	r7, r1, #30
 8000ffc:	d42d      	bmi.n	800105a <HAL_RCC_ClockConfig+0x7e>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ffe:	07c8      	lsls	r0, r1, #31
 8001000:	d440      	bmi.n	8001084 <HAL_RCC_ClockConfig+0xa8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001002:	4b3f      	ldr	r3, [pc, #252]	; (8001100 <HAL_RCC_ClockConfig+0x124>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	f002 020f 	and.w	r2, r2, #15
 800100a:	4295      	cmp	r5, r2
 800100c:	d366      	bcc.n	80010dc <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800100e:	6822      	ldr	r2, [r4, #0]
 8001010:	0751      	lsls	r1, r2, #29
 8001012:	d46c      	bmi.n	80010ee <HAL_RCC_ClockConfig+0x112>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001014:	0713      	lsls	r3, r2, #28
 8001016:	d507      	bpl.n	8001028 <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001018:	4a3a      	ldr	r2, [pc, #232]	; (8001104 <HAL_RCC_ClockConfig+0x128>)
 800101a:	6921      	ldr	r1, [r4, #16]
 800101c:	6893      	ldr	r3, [r2, #8]
 800101e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001022:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001026:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001028:	f000 f892 	bl	8001150 <HAL_RCC_GetSysClockFreq>
 800102c:	4b35      	ldr	r3, [pc, #212]	; (8001104 <HAL_RCC_ClockConfig+0x128>)
 800102e:	4a36      	ldr	r2, [pc, #216]	; (8001108 <HAL_RCC_ClockConfig+0x12c>)
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001036:	5cd3      	ldrb	r3, [r2, r3]
 8001038:	40d8      	lsrs	r0, r3
 800103a:	4b34      	ldr	r3, [pc, #208]	; (800110c <HAL_RCC_ClockConfig+0x130>)
 800103c:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800103e:	2000      	movs	r0, #0
 8001040:	f7ff fabe 	bl	80005c0 <HAL_InitTick>

  return HAL_OK;
 8001044:	2000      	movs	r0, #0
 8001046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800104a:	b2ca      	uxtb	r2, r1
 800104c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 030f 	and.w	r3, r3, #15
 8001054:	4299      	cmp	r1, r3
 8001056:	d1c6      	bne.n	8000fe6 <HAL_RCC_ClockConfig+0xa>
 8001058:	e7ce      	b.n	8000ff8 <HAL_RCC_ClockConfig+0x1c>
 800105a:	4b2a      	ldr	r3, [pc, #168]	; (8001104 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800105c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001060:	bf1e      	ittt	ne
 8001062:	689a      	ldrne	r2, [r3, #8]
 8001064:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001068:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800106a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800106c:	bf42      	ittt	mi
 800106e:	689a      	ldrmi	r2, [r3, #8]
 8001070:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001074:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	68a0      	ldr	r0, [r4, #8]
 800107a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800107e:	4302      	orrs	r2, r0
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	e7bc      	b.n	8000ffe <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001084:	6862      	ldr	r2, [r4, #4]
 8001086:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <HAL_RCC_ClockConfig+0x128>)
 8001088:	2a01      	cmp	r2, #1
 800108a:	d11d      	bne.n	80010c8 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001092:	d0a8      	beq.n	8000fe6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001094:	4e1b      	ldr	r6, [pc, #108]	; (8001104 <HAL_RCC_ClockConfig+0x128>)
 8001096:	68b3      	ldr	r3, [r6, #8]
 8001098:	f023 0303 	bic.w	r3, r3, #3
 800109c:	4313      	orrs	r3, r2
 800109e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80010a0:	f7ff fad8 	bl	8000654 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010a4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80010a8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010aa:	68b3      	ldr	r3, [r6, #8]
 80010ac:	6862      	ldr	r2, [r4, #4]
 80010ae:	f003 030c 	and.w	r3, r3, #12
 80010b2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80010b6:	d0a4      	beq.n	8001002 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010b8:	f7ff facc 	bl	8000654 <HAL_GetTick>
 80010bc:	1bc0      	subs	r0, r0, r7
 80010be:	4540      	cmp	r0, r8
 80010c0:	d9f3      	bls.n	80010aa <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80010c2:	2003      	movs	r0, #3
}
 80010c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010c8:	1e91      	subs	r1, r2, #2
 80010ca:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010cc:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010ce:	d802      	bhi.n	80010d6 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010d0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80010d4:	e7dd      	b.n	8001092 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d6:	f013 0f02 	tst.w	r3, #2
 80010da:	e7da      	b.n	8001092 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010dc:	b2ea      	uxtb	r2, r5
 80010de:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 030f 	and.w	r3, r3, #15
 80010e6:	429d      	cmp	r5, r3
 80010e8:	f47f af7d 	bne.w	8000fe6 <HAL_RCC_ClockConfig+0xa>
 80010ec:	e78f      	b.n	800100e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010ee:	4905      	ldr	r1, [pc, #20]	; (8001104 <HAL_RCC_ClockConfig+0x128>)
 80010f0:	68e0      	ldr	r0, [r4, #12]
 80010f2:	688b      	ldr	r3, [r1, #8]
 80010f4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80010f8:	4303      	orrs	r3, r0
 80010fa:	608b      	str	r3, [r1, #8]
 80010fc:	e78a      	b.n	8001014 <HAL_RCC_ClockConfig+0x38>
 80010fe:	bf00      	nop
 8001100:	40023c00 	.word	0x40023c00
 8001104:	40023800 	.word	0x40023800
 8001108:	08002caf 	.word	0x08002caf
 800110c:	20000008 	.word	0x20000008

08001110 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001112:	4a05      	ldr	r2, [pc, #20]	; (8001128 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800111a:	5cd3      	ldrb	r3, [r2, r3]
 800111c:	4a03      	ldr	r2, [pc, #12]	; (800112c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800111e:	6810      	ldr	r0, [r2, #0]
}
 8001120:	40d8      	lsrs	r0, r3
 8001122:	4770      	bx	lr
 8001124:	40023800 	.word	0x40023800
 8001128:	08002cbf 	.word	0x08002cbf
 800112c:	20000008 	.word	0x20000008

08001130 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001132:	4a05      	ldr	r2, [pc, #20]	; (8001148 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800113a:	5cd3      	ldrb	r3, [r2, r3]
 800113c:	4a03      	ldr	r2, [pc, #12]	; (800114c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800113e:	6810      	ldr	r0, [r2, #0]
}
 8001140:	40d8      	lsrs	r0, r3
 8001142:	4770      	bx	lr
 8001144:	40023800 	.word	0x40023800
 8001148:	08002cbf 	.word	0x08002cbf
 800114c:	20000008 	.word	0x20000008

08001150 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001150:	4920      	ldr	r1, [pc, #128]	; (80011d4 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8001152:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001154:	688b      	ldr	r3, [r1, #8]
 8001156:	f003 030c 	and.w	r3, r3, #12
 800115a:	2b08      	cmp	r3, #8
 800115c:	d007      	beq.n	800116e <HAL_RCC_GetSysClockFreq+0x1e>
 800115e:	2b0c      	cmp	r3, #12
 8001160:	d020      	beq.n	80011a4 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001162:	4a1d      	ldr	r2, [pc, #116]	; (80011d8 <HAL_RCC_GetSysClockFreq+0x88>)
 8001164:	481d      	ldr	r0, [pc, #116]	; (80011dc <HAL_RCC_GetSysClockFreq+0x8c>)
 8001166:	2b04      	cmp	r3, #4
 8001168:	bf18      	it	ne
 800116a:	4610      	movne	r0, r2
 800116c:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800116e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001170:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001172:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001174:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001178:	bf14      	ite	ne
 800117a:	4818      	ldrne	r0, [pc, #96]	; (80011dc <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800117c:	4816      	ldreq	r0, [pc, #88]	; (80011d8 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800117e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001182:	bf18      	it	ne
 8001184:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001186:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800118a:	fba1 0100 	umull	r0, r1, r1, r0
 800118e:	f7ff f88f 	bl	80002b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <HAL_RCC_GetSysClockFreq+0x84>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800119a:	3301      	adds	r3, #1
 800119c:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 800119e:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80011a2:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011a4:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011a6:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011a8:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011aa:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011ae:	bf14      	ite	ne
 80011b0:	480a      	ldrne	r0, [pc, #40]	; (80011dc <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011b2:	4809      	ldreq	r0, [pc, #36]	; (80011d8 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011b4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80011b8:	bf18      	it	ne
 80011ba:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011bc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011c0:	fba1 0100 	umull	r0, r1, r1, r0
 80011c4:	f7ff f874 	bl	80002b0 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80011c8:	4b02      	ldr	r3, [pc, #8]	; (80011d4 <HAL_RCC_GetSysClockFreq+0x84>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f3c3 7302 	ubfx	r3, r3, #28, #3
 80011d0:	e7e5      	b.n	800119e <HAL_RCC_GetSysClockFreq+0x4e>
 80011d2:	bf00      	nop
 80011d4:	40023800 	.word	0x40023800
 80011d8:	00f42400 	.word	0x00f42400
 80011dc:	007a1200 	.word	0x007a1200

080011e0 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011e0:	6803      	ldr	r3, [r0, #0]
{
 80011e2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011e6:	07df      	lsls	r7, r3, #31
{
 80011e8:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ea:	d410      	bmi.n	800120e <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ec:	6823      	ldr	r3, [r4, #0]
 80011ee:	079e      	lsls	r6, r3, #30
 80011f0:	d467      	bmi.n	80012c2 <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011f2:	6823      	ldr	r3, [r4, #0]
 80011f4:	071a      	lsls	r2, r3, #28
 80011f6:	f100 80b2 	bmi.w	800135e <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011fa:	6823      	ldr	r3, [r4, #0]
 80011fc:	075b      	lsls	r3, r3, #29
 80011fe:	f100 80d0 	bmi.w	80013a2 <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001202:	69a2      	ldr	r2, [r4, #24]
 8001204:	2a00      	cmp	r2, #0
 8001206:	f040 8139 	bne.w	800147c <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800120a:	2000      	movs	r0, #0
 800120c:	e01e      	b.n	800124c <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800120e:	4b97      	ldr	r3, [pc, #604]	; (800146c <HAL_RCC_OscConfig+0x28c>)
 8001210:	689a      	ldr	r2, [r3, #8]
 8001212:	f002 020c 	and.w	r2, r2, #12
 8001216:	2a04      	cmp	r2, #4
 8001218:	d010      	beq.n	800123c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001220:	2a08      	cmp	r2, #8
 8001222:	d102      	bne.n	800122a <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	025d      	lsls	r5, r3, #9
 8001228:	d408      	bmi.n	800123c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800122a:	4b90      	ldr	r3, [pc, #576]	; (800146c <HAL_RCC_OscConfig+0x28c>)
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001232:	2a0c      	cmp	r2, #12
 8001234:	d10d      	bne.n	8001252 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001236:	685a      	ldr	r2, [r3, #4]
 8001238:	0250      	lsls	r0, r2, #9
 800123a:	d50a      	bpl.n	8001252 <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800123c:	4b8b      	ldr	r3, [pc, #556]	; (800146c <HAL_RCC_OscConfig+0x28c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	0399      	lsls	r1, r3, #14
 8001242:	d5d3      	bpl.n	80011ec <HAL_RCC_OscConfig+0xc>
 8001244:	6863      	ldr	r3, [r4, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1d0      	bne.n	80011ec <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800124a:	2001      	movs	r0, #1
}
 800124c:	b002      	add	sp, #8
 800124e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001252:	6862      	ldr	r2, [r4, #4]
 8001254:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001258:	d111      	bne.n	800127e <HAL_RCC_OscConfig+0x9e>
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001260:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001262:	f7ff f9f7 	bl	8000654 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001266:	4d81      	ldr	r5, [pc, #516]	; (800146c <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001268:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126a:	682b      	ldr	r3, [r5, #0]
 800126c:	039a      	lsls	r2, r3, #14
 800126e:	d4bd      	bmi.n	80011ec <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001270:	f7ff f9f0 	bl	8000654 <HAL_GetTick>
 8001274:	1b80      	subs	r0, r0, r6
 8001276:	2864      	cmp	r0, #100	; 0x64
 8001278:	d9f7      	bls.n	800126a <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 800127a:	2003      	movs	r0, #3
 800127c:	e7e6      	b.n	800124c <HAL_RCC_OscConfig+0x6c>
 800127e:	4d7b      	ldr	r5, [pc, #492]	; (800146c <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001280:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001284:	682b      	ldr	r3, [r5, #0]
 8001286:	d107      	bne.n	8001298 <HAL_RCC_OscConfig+0xb8>
 8001288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800128c:	602b      	str	r3, [r5, #0]
 800128e:	682b      	ldr	r3, [r5, #0]
 8001290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001294:	602b      	str	r3, [r5, #0]
 8001296:	e7e4      	b.n	8001262 <HAL_RCC_OscConfig+0x82>
 8001298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800129c:	602b      	str	r3, [r5, #0]
 800129e:	682b      	ldr	r3, [r5, #0]
 80012a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012a4:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012a6:	2a00      	cmp	r2, #0
 80012a8:	d1db      	bne.n	8001262 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80012aa:	f7ff f9d3 	bl	8000654 <HAL_GetTick>
 80012ae:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b0:	682b      	ldr	r3, [r5, #0]
 80012b2:	039b      	lsls	r3, r3, #14
 80012b4:	d59a      	bpl.n	80011ec <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012b6:	f7ff f9cd 	bl	8000654 <HAL_GetTick>
 80012ba:	1b80      	subs	r0, r0, r6
 80012bc:	2864      	cmp	r0, #100	; 0x64
 80012be:	d9f7      	bls.n	80012b0 <HAL_RCC_OscConfig+0xd0>
 80012c0:	e7db      	b.n	800127a <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80012c2:	4b6a      	ldr	r3, [pc, #424]	; (800146c <HAL_RCC_OscConfig+0x28c>)
 80012c4:	689a      	ldr	r2, [r3, #8]
 80012c6:	f012 0f0c 	tst.w	r2, #12
 80012ca:	d010      	beq.n	80012ee <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80012cc:	689a      	ldr	r2, [r3, #8]
 80012ce:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80012d2:	2a08      	cmp	r2, #8
 80012d4:	d102      	bne.n	80012dc <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	025f      	lsls	r7, r3, #9
 80012da:	d508      	bpl.n	80012ee <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012dc:	4a63      	ldr	r2, [pc, #396]	; (800146c <HAL_RCC_OscConfig+0x28c>)
 80012de:	6893      	ldr	r3, [r2, #8]
 80012e0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80012e4:	2b0c      	cmp	r3, #12
 80012e6:	d111      	bne.n	800130c <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012e8:	6853      	ldr	r3, [r2, #4]
 80012ea:	025e      	lsls	r6, r3, #9
 80012ec:	d40e      	bmi.n	800130c <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ee:	4b5f      	ldr	r3, [pc, #380]	; (800146c <HAL_RCC_OscConfig+0x28c>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	0795      	lsls	r5, r2, #30
 80012f4:	d502      	bpl.n	80012fc <HAL_RCC_OscConfig+0x11c>
 80012f6:	68e2      	ldr	r2, [r4, #12]
 80012f8:	2a01      	cmp	r2, #1
 80012fa:	d1a6      	bne.n	800124a <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	6921      	ldr	r1, [r4, #16]
 8001300:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001304:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001308:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800130a:	e772      	b.n	80011f2 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800130c:	68e2      	ldr	r2, [r4, #12]
 800130e:	4b58      	ldr	r3, [pc, #352]	; (8001470 <HAL_RCC_OscConfig+0x290>)
 8001310:	b1b2      	cbz	r2, 8001340 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 8001312:	2201      	movs	r2, #1
 8001314:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001316:	f7ff f99d 	bl	8000654 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800131a:	4d54      	ldr	r5, [pc, #336]	; (800146c <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 800131c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800131e:	682b      	ldr	r3, [r5, #0]
 8001320:	0798      	lsls	r0, r3, #30
 8001322:	d507      	bpl.n	8001334 <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001324:	682b      	ldr	r3, [r5, #0]
 8001326:	6922      	ldr	r2, [r4, #16]
 8001328:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800132c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001330:	602b      	str	r3, [r5, #0]
 8001332:	e75e      	b.n	80011f2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001334:	f7ff f98e 	bl	8000654 <HAL_GetTick>
 8001338:	1b80      	subs	r0, r0, r6
 800133a:	2802      	cmp	r0, #2
 800133c:	d9ef      	bls.n	800131e <HAL_RCC_OscConfig+0x13e>
 800133e:	e79c      	b.n	800127a <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8001340:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001342:	f7ff f987 	bl	8000654 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001346:	4d49      	ldr	r5, [pc, #292]	; (800146c <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001348:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800134a:	682b      	ldr	r3, [r5, #0]
 800134c:	0799      	lsls	r1, r3, #30
 800134e:	f57f af50 	bpl.w	80011f2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001352:	f7ff f97f 	bl	8000654 <HAL_GetTick>
 8001356:	1b80      	subs	r0, r0, r6
 8001358:	2802      	cmp	r0, #2
 800135a:	d9f6      	bls.n	800134a <HAL_RCC_OscConfig+0x16a>
 800135c:	e78d      	b.n	800127a <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800135e:	6962      	ldr	r2, [r4, #20]
 8001360:	4b44      	ldr	r3, [pc, #272]	; (8001474 <HAL_RCC_OscConfig+0x294>)
 8001362:	b17a      	cbz	r2, 8001384 <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 8001364:	2201      	movs	r2, #1
 8001366:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001368:	f7ff f974 	bl	8000654 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800136c:	4d3f      	ldr	r5, [pc, #252]	; (800146c <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 800136e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001370:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001372:	079f      	lsls	r7, r3, #30
 8001374:	f53f af41 	bmi.w	80011fa <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001378:	f7ff f96c 	bl	8000654 <HAL_GetTick>
 800137c:	1b80      	subs	r0, r0, r6
 800137e:	2802      	cmp	r0, #2
 8001380:	d9f6      	bls.n	8001370 <HAL_RCC_OscConfig+0x190>
 8001382:	e77a      	b.n	800127a <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 8001384:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001386:	f7ff f965 	bl	8000654 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800138a:	4d38      	ldr	r5, [pc, #224]	; (800146c <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 800138c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800138e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001390:	0798      	lsls	r0, r3, #30
 8001392:	f57f af32 	bpl.w	80011fa <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001396:	f7ff f95d 	bl	8000654 <HAL_GetTick>
 800139a:	1b80      	subs	r0, r0, r6
 800139c:	2802      	cmp	r0, #2
 800139e:	d9f6      	bls.n	800138e <HAL_RCC_OscConfig+0x1ae>
 80013a0:	e76b      	b.n	800127a <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013a2:	4b32      	ldr	r3, [pc, #200]	; (800146c <HAL_RCC_OscConfig+0x28c>)
 80013a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013a6:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80013aa:	d128      	bne.n	80013fe <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ac:	9201      	str	r2, [sp, #4]
 80013ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013b4:	641a      	str	r2, [r3, #64]	; 0x40
 80013b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013bc:	9301      	str	r3, [sp, #4]
 80013be:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80013c0:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c2:	4d2d      	ldr	r5, [pc, #180]	; (8001478 <HAL_RCC_OscConfig+0x298>)
 80013c4:	682b      	ldr	r3, [r5, #0]
 80013c6:	05d9      	lsls	r1, r3, #23
 80013c8:	d51b      	bpl.n	8001402 <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ca:	68a3      	ldr	r3, [r4, #8]
 80013cc:	4d27      	ldr	r5, [pc, #156]	; (800146c <HAL_RCC_OscConfig+0x28c>)
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d127      	bne.n	8001422 <HAL_RCC_OscConfig+0x242>
 80013d2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80013da:	f7ff f93b 	bl	8000654 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013de:	4d23      	ldr	r5, [pc, #140]	; (800146c <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80013e0:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013e2:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013e8:	079b      	lsls	r3, r3, #30
 80013ea:	d539      	bpl.n	8001460 <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	f43f af08 	beq.w	8001202 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013f2:	4a1e      	ldr	r2, [pc, #120]	; (800146c <HAL_RCC_OscConfig+0x28c>)
 80013f4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80013f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013fa:	6413      	str	r3, [r2, #64]	; 0x40
 80013fc:	e701      	b.n	8001202 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80013fe:	2600      	movs	r6, #0
 8001400:	e7df      	b.n	80013c2 <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001402:	682b      	ldr	r3, [r5, #0]
 8001404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001408:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800140a:	f7ff f923 	bl	8000654 <HAL_GetTick>
 800140e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001410:	682b      	ldr	r3, [r5, #0]
 8001412:	05da      	lsls	r2, r3, #23
 8001414:	d4d9      	bmi.n	80013ca <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001416:	f7ff f91d 	bl	8000654 <HAL_GetTick>
 800141a:	1bc0      	subs	r0, r0, r7
 800141c:	2802      	cmp	r0, #2
 800141e:	d9f7      	bls.n	8001410 <HAL_RCC_OscConfig+0x230>
 8001420:	e72b      	b.n	800127a <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001422:	2b05      	cmp	r3, #5
 8001424:	d104      	bne.n	8001430 <HAL_RCC_OscConfig+0x250>
 8001426:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	672b      	str	r3, [r5, #112]	; 0x70
 800142e:	e7d0      	b.n	80013d2 <HAL_RCC_OscConfig+0x1f2>
 8001430:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001432:	f022 0201 	bic.w	r2, r2, #1
 8001436:	672a      	str	r2, [r5, #112]	; 0x70
 8001438:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800143a:	f022 0204 	bic.w	r2, r2, #4
 800143e:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1ca      	bne.n	80013da <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 8001444:	f7ff f906 	bl	8000654 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001448:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800144c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800144e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001450:	0798      	lsls	r0, r3, #30
 8001452:	d5cb      	bpl.n	80013ec <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001454:	f7ff f8fe 	bl	8000654 <HAL_GetTick>
 8001458:	1bc0      	subs	r0, r0, r7
 800145a:	4540      	cmp	r0, r8
 800145c:	d9f7      	bls.n	800144e <HAL_RCC_OscConfig+0x26e>
 800145e:	e70c      	b.n	800127a <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001460:	f7ff f8f8 	bl	8000654 <HAL_GetTick>
 8001464:	1bc0      	subs	r0, r0, r7
 8001466:	4540      	cmp	r0, r8
 8001468:	d9bd      	bls.n	80013e6 <HAL_RCC_OscConfig+0x206>
 800146a:	e706      	b.n	800127a <HAL_RCC_OscConfig+0x9a>
 800146c:	40023800 	.word	0x40023800
 8001470:	42470000 	.word	0x42470000
 8001474:	42470e80 	.word	0x42470e80
 8001478:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800147c:	4d23      	ldr	r5, [pc, #140]	; (800150c <HAL_RCC_OscConfig+0x32c>)
 800147e:	68ab      	ldr	r3, [r5, #8]
 8001480:	f003 030c 	and.w	r3, r3, #12
 8001484:	2b08      	cmp	r3, #8
 8001486:	f43f aee0 	beq.w	800124a <HAL_RCC_OscConfig+0x6a>
 800148a:	4e21      	ldr	r6, [pc, #132]	; (8001510 <HAL_RCC_OscConfig+0x330>)
 800148c:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800148e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001490:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001492:	d12d      	bne.n	80014f0 <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 8001494:	f7ff f8de 	bl	8000654 <HAL_GetTick>
 8001498:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800149a:	682b      	ldr	r3, [r5, #0]
 800149c:	0199      	lsls	r1, r3, #6
 800149e:	d421      	bmi.n	80014e4 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014a0:	6a22      	ldr	r2, [r4, #32]
 80014a2:	69e3      	ldr	r3, [r4, #28]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80014a8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80014ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80014ae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80014b2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80014b4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80014b8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ba:	4c14      	ldr	r4, [pc, #80]	; (800150c <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014bc:	0852      	lsrs	r2, r2, #1
 80014be:	3a01      	subs	r2, #1
 80014c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80014c4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80014c6:	2301      	movs	r3, #1
 80014c8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80014ca:	f7ff f8c3 	bl	8000654 <HAL_GetTick>
 80014ce:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014d0:	6823      	ldr	r3, [r4, #0]
 80014d2:	019a      	lsls	r2, r3, #6
 80014d4:	f53f ae99 	bmi.w	800120a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014d8:	f7ff f8bc 	bl	8000654 <HAL_GetTick>
 80014dc:	1b40      	subs	r0, r0, r5
 80014de:	2802      	cmp	r0, #2
 80014e0:	d9f6      	bls.n	80014d0 <HAL_RCC_OscConfig+0x2f0>
 80014e2:	e6ca      	b.n	800127a <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014e4:	f7ff f8b6 	bl	8000654 <HAL_GetTick>
 80014e8:	1bc0      	subs	r0, r0, r7
 80014ea:	2802      	cmp	r0, #2
 80014ec:	d9d5      	bls.n	800149a <HAL_RCC_OscConfig+0x2ba>
 80014ee:	e6c4      	b.n	800127a <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 80014f0:	f7ff f8b0 	bl	8000654 <HAL_GetTick>
 80014f4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f6:	682b      	ldr	r3, [r5, #0]
 80014f8:	019b      	lsls	r3, r3, #6
 80014fa:	f57f ae86 	bpl.w	800120a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014fe:	f7ff f8a9 	bl	8000654 <HAL_GetTick>
 8001502:	1b00      	subs	r0, r0, r4
 8001504:	2802      	cmp	r0, #2
 8001506:	d9f6      	bls.n	80014f6 <HAL_RCC_OscConfig+0x316>
 8001508:	e6b7      	b.n	800127a <HAL_RCC_OscConfig+0x9a>
 800150a:	bf00      	nop
 800150c:	40023800 	.word	0x40023800
 8001510:	42470060 	.word	0x42470060

08001514 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001518:	6806      	ldr	r6, [r0, #0]
 800151a:	68c2      	ldr	r2, [r0, #12]
 800151c:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800151e:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001520:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001524:	4313      	orrs	r3, r2
 8001526:	6133      	str	r3, [r6, #16]
{
 8001528:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800152a:	6883      	ldr	r3, [r0, #8]
 800152c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800152e:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001530:	4303      	orrs	r3, r0
 8001532:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001534:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001538:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800153a:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800153e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 8001540:	4313      	orrs	r3, r2
 8001542:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001544:	6973      	ldr	r3, [r6, #20]
 8001546:	69a2      	ldr	r2, [r4, #24]
 8001548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800154c:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800154e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001552:	6173      	str	r3, [r6, #20]
 8001554:	4b7a      	ldr	r3, [pc, #488]	; (8001740 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001556:	d17c      	bne.n	8001652 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001558:	429e      	cmp	r6, r3
 800155a:	d003      	beq.n	8001564 <UART_SetConfig+0x50>
 800155c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001560:	429e      	cmp	r6, r3
 8001562:	d144      	bne.n	80015ee <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001564:	f7ff fde4 	bl	8001130 <HAL_RCC_GetPCLK2Freq>
 8001568:	2519      	movs	r5, #25
 800156a:	fb05 f300 	mul.w	r3, r5, r0
 800156e:	6860      	ldr	r0, [r4, #4]
 8001570:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001574:	0040      	lsls	r0, r0, #1
 8001576:	fbb3 f3f0 	udiv	r3, r3, r0
 800157a:	fbb3 f3f9 	udiv	r3, r3, r9
 800157e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001582:	f7ff fdd5 	bl	8001130 <HAL_RCC_GetPCLK2Freq>
 8001586:	6863      	ldr	r3, [r4, #4]
 8001588:	4368      	muls	r0, r5
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	fbb0 f7f3 	udiv	r7, r0, r3
 8001590:	f7ff fdce 	bl	8001130 <HAL_RCC_GetPCLK2Freq>
 8001594:	6863      	ldr	r3, [r4, #4]
 8001596:	4368      	muls	r0, r5
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	fbb0 f3f3 	udiv	r3, r0, r3
 800159e:	fbb3 f3f9 	udiv	r3, r3, r9
 80015a2:	fb09 7313 	mls	r3, r9, r3, r7
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	3332      	adds	r3, #50	; 0x32
 80015aa:	fbb3 f3f9 	udiv	r3, r3, r9
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80015b4:	f7ff fdbc 	bl	8001130 <HAL_RCC_GetPCLK2Freq>
 80015b8:	6862      	ldr	r2, [r4, #4]
 80015ba:	4368      	muls	r0, r5
 80015bc:	0052      	lsls	r2, r2, #1
 80015be:	fbb0 faf2 	udiv	sl, r0, r2
 80015c2:	f7ff fdb5 	bl	8001130 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80015c6:	6863      	ldr	r3, [r4, #4]
 80015c8:	4368      	muls	r0, r5
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80015d0:	fbb3 f3f9 	udiv	r3, r3, r9
 80015d4:	fb09 a313 	mls	r3, r9, r3, sl
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	3332      	adds	r3, #50	; 0x32
 80015dc:	fbb3 f3f9 	udiv	r3, r3, r9
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80015e6:	443b      	add	r3, r7
 80015e8:	60b3      	str	r3, [r6, #8]
 80015ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80015ee:	f7ff fd8f 	bl	8001110 <HAL_RCC_GetPCLK1Freq>
 80015f2:	2519      	movs	r5, #25
 80015f4:	fb05 f300 	mul.w	r3, r5, r0
 80015f8:	6860      	ldr	r0, [r4, #4]
 80015fa:	f04f 0964 	mov.w	r9, #100	; 0x64
 80015fe:	0040      	lsls	r0, r0, #1
 8001600:	fbb3 f3f0 	udiv	r3, r3, r0
 8001604:	fbb3 f3f9 	udiv	r3, r3, r9
 8001608:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800160c:	f7ff fd80 	bl	8001110 <HAL_RCC_GetPCLK1Freq>
 8001610:	6863      	ldr	r3, [r4, #4]
 8001612:	4368      	muls	r0, r5
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	fbb0 f7f3 	udiv	r7, r0, r3
 800161a:	f7ff fd79 	bl	8001110 <HAL_RCC_GetPCLK1Freq>
 800161e:	6863      	ldr	r3, [r4, #4]
 8001620:	4368      	muls	r0, r5
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	fbb0 f3f3 	udiv	r3, r0, r3
 8001628:	fbb3 f3f9 	udiv	r3, r3, r9
 800162c:	fb09 7313 	mls	r3, r9, r3, r7
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	3332      	adds	r3, #50	; 0x32
 8001634:	fbb3 f3f9 	udiv	r3, r3, r9
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800163e:	f7ff fd67 	bl	8001110 <HAL_RCC_GetPCLK1Freq>
 8001642:	6862      	ldr	r2, [r4, #4]
 8001644:	4368      	muls	r0, r5
 8001646:	0052      	lsls	r2, r2, #1
 8001648:	fbb0 faf2 	udiv	sl, r0, r2
 800164c:	f7ff fd60 	bl	8001110 <HAL_RCC_GetPCLK1Freq>
 8001650:	e7b9      	b.n	80015c6 <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001652:	429e      	cmp	r6, r3
 8001654:	d002      	beq.n	800165c <UART_SetConfig+0x148>
 8001656:	4b3b      	ldr	r3, [pc, #236]	; (8001744 <UART_SetConfig+0x230>)
 8001658:	429e      	cmp	r6, r3
 800165a:	d140      	bne.n	80016de <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800165c:	f7ff fd68 	bl	8001130 <HAL_RCC_GetPCLK2Freq>
 8001660:	6867      	ldr	r7, [r4, #4]
 8001662:	2519      	movs	r5, #25
 8001664:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001668:	fb05 f300 	mul.w	r3, r5, r0
 800166c:	00bf      	lsls	r7, r7, #2
 800166e:	fbb3 f3f7 	udiv	r3, r3, r7
 8001672:	fbb3 f3f9 	udiv	r3, r3, r9
 8001676:	011f      	lsls	r7, r3, #4
 8001678:	f7ff fd5a 	bl	8001130 <HAL_RCC_GetPCLK2Freq>
 800167c:	6863      	ldr	r3, [r4, #4]
 800167e:	4368      	muls	r0, r5
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	fbb0 f8f3 	udiv	r8, r0, r3
 8001686:	f7ff fd53 	bl	8001130 <HAL_RCC_GetPCLK2Freq>
 800168a:	6863      	ldr	r3, [r4, #4]
 800168c:	4368      	muls	r0, r5
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	fbb0 f3f3 	udiv	r3, r0, r3
 8001694:	fbb3 f3f9 	udiv	r3, r3, r9
 8001698:	fb09 8313 	mls	r3, r9, r3, r8
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	3332      	adds	r3, #50	; 0x32
 80016a0:	fbb3 f3f9 	udiv	r3, r3, r9
 80016a4:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80016a8:	f7ff fd42 	bl	8001130 <HAL_RCC_GetPCLK2Freq>
 80016ac:	6862      	ldr	r2, [r4, #4]
 80016ae:	4368      	muls	r0, r5
 80016b0:	0092      	lsls	r2, r2, #2
 80016b2:	fbb0 faf2 	udiv	sl, r0, r2
 80016b6:	f7ff fd3b 	bl	8001130 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80016ba:	6863      	ldr	r3, [r4, #4]
 80016bc:	4368      	muls	r0, r5
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80016c4:	fbb3 f3f9 	udiv	r3, r3, r9
 80016c8:	fb09 a313 	mls	r3, r9, r3, sl
 80016cc:	011b      	lsls	r3, r3, #4
 80016ce:	3332      	adds	r3, #50	; 0x32
 80016d0:	fbb3 f3f9 	udiv	r3, r3, r9
 80016d4:	f003 030f 	and.w	r3, r3, #15
 80016d8:	ea43 0308 	orr.w	r3, r3, r8
 80016dc:	e783      	b.n	80015e6 <UART_SetConfig+0xd2>
 80016de:	f7ff fd17 	bl	8001110 <HAL_RCC_GetPCLK1Freq>
 80016e2:	6867      	ldr	r7, [r4, #4]
 80016e4:	2519      	movs	r5, #25
 80016e6:	f04f 0964 	mov.w	r9, #100	; 0x64
 80016ea:	fb05 f300 	mul.w	r3, r5, r0
 80016ee:	00bf      	lsls	r7, r7, #2
 80016f0:	fbb3 f3f7 	udiv	r3, r3, r7
 80016f4:	fbb3 f3f9 	udiv	r3, r3, r9
 80016f8:	011f      	lsls	r7, r3, #4
 80016fa:	f7ff fd09 	bl	8001110 <HAL_RCC_GetPCLK1Freq>
 80016fe:	6863      	ldr	r3, [r4, #4]
 8001700:	4368      	muls	r0, r5
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	fbb0 f8f3 	udiv	r8, r0, r3
 8001708:	f7ff fd02 	bl	8001110 <HAL_RCC_GetPCLK1Freq>
 800170c:	6863      	ldr	r3, [r4, #4]
 800170e:	4368      	muls	r0, r5
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	fbb0 f3f3 	udiv	r3, r0, r3
 8001716:	fbb3 f3f9 	udiv	r3, r3, r9
 800171a:	fb09 8313 	mls	r3, r9, r3, r8
 800171e:	011b      	lsls	r3, r3, #4
 8001720:	3332      	adds	r3, #50	; 0x32
 8001722:	fbb3 f3f9 	udiv	r3, r3, r9
 8001726:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800172a:	f7ff fcf1 	bl	8001110 <HAL_RCC_GetPCLK1Freq>
 800172e:	6862      	ldr	r2, [r4, #4]
 8001730:	4368      	muls	r0, r5
 8001732:	0092      	lsls	r2, r2, #2
 8001734:	fbb0 faf2 	udiv	sl, r0, r2
 8001738:	f7ff fcea 	bl	8001110 <HAL_RCC_GetPCLK1Freq>
 800173c:	e7bd      	b.n	80016ba <UART_SetConfig+0x1a6>
 800173e:	bf00      	nop
 8001740:	40011000 	.word	0x40011000
 8001744:	40011400 	.word	0x40011400

08001748 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800174a:	4604      	mov	r4, r0
 800174c:	460e      	mov	r6, r1
 800174e:	4617      	mov	r7, r2
 8001750:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001752:	6821      	ldr	r1, [r4, #0]
 8001754:	680b      	ldr	r3, [r1, #0]
 8001756:	ea36 0303 	bics.w	r3, r6, r3
 800175a:	d101      	bne.n	8001760 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 800175c:	2000      	movs	r0, #0
}
 800175e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001760:	1c6b      	adds	r3, r5, #1
 8001762:	d0f7      	beq.n	8001754 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001764:	b995      	cbnz	r5, 800178c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001766:	6823      	ldr	r3, [r4, #0]
 8001768:	68da      	ldr	r2, [r3, #12]
 800176a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800176e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001770:	695a      	ldr	r2, [r3, #20]
 8001772:	f022 0201 	bic.w	r2, r2, #1
 8001776:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001778:	2320      	movs	r3, #32
 800177a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800177e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001782:	2300      	movs	r3, #0
 8001784:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001788:	2003      	movs	r0, #3
 800178a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800178c:	f7fe ff62 	bl	8000654 <HAL_GetTick>
 8001790:	1bc0      	subs	r0, r0, r7
 8001792:	4285      	cmp	r5, r0
 8001794:	d2dd      	bcs.n	8001752 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001796:	e7e6      	b.n	8001766 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001798 <HAL_UART_Init>:
{
 8001798:	b510      	push	{r4, lr}
  if (huart == NULL)
 800179a:	4604      	mov	r4, r0
 800179c:	b340      	cbz	r0, 80017f0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800179e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80017a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80017a6:	b91b      	cbnz	r3, 80017b0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80017a8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80017ac:	f000 fa70 	bl	8001c90 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80017b0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80017b2:	2324      	movs	r3, #36	; 0x24
 80017b4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80017b8:	68d3      	ldr	r3, [r2, #12]
 80017ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80017be:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80017c0:	4620      	mov	r0, r4
 80017c2:	f7ff fea7 	bl	8001514 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80017c6:	6823      	ldr	r3, [r4, #0]
 80017c8:	691a      	ldr	r2, [r3, #16]
 80017ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80017ce:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80017d0:	695a      	ldr	r2, [r3, #20]
 80017d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80017d6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80017d8:	68da      	ldr	r2, [r3, #12]
 80017da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017de:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017e0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80017e2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017e4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80017e6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80017ea:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80017ee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80017f0:	2001      	movs	r0, #1
}
 80017f2:	bd10      	pop	{r4, pc}

080017f4 <HAL_UART_Transmit>:
{
 80017f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017f8:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80017fa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80017fe:	2b20      	cmp	r3, #32
{
 8001800:	4604      	mov	r4, r0
 8001802:	460d      	mov	r5, r1
 8001804:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001806:	d14f      	bne.n	80018a8 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8001808:	2900      	cmp	r1, #0
 800180a:	d04a      	beq.n	80018a2 <HAL_UART_Transmit+0xae>
 800180c:	2a00      	cmp	r2, #0
 800180e:	d048      	beq.n	80018a2 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8001810:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001814:	2b01      	cmp	r3, #1
 8001816:	d047      	beq.n	80018a8 <HAL_UART_Transmit+0xb4>
 8001818:	2301      	movs	r3, #1
 800181a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800181e:	2300      	movs	r3, #0
 8001820:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001822:	2321      	movs	r3, #33	; 0x21
 8001824:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001828:	f7fe ff14 	bl	8000654 <HAL_GetTick>
    huart->TxXferSize = Size;
 800182c:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001830:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001832:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001836:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001838:	b29b      	uxth	r3, r3
 800183a:	b96b      	cbnz	r3, 8001858 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800183c:	463b      	mov	r3, r7
 800183e:	4632      	mov	r2, r6
 8001840:	2140      	movs	r1, #64	; 0x40
 8001842:	4620      	mov	r0, r4
 8001844:	f7ff ff80 	bl	8001748 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001848:	b9b0      	cbnz	r0, 8001878 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 800184a:	2320      	movs	r3, #32
 800184c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001850:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001858:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800185a:	3b01      	subs	r3, #1
 800185c:	b29b      	uxth	r3, r3
 800185e:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001860:	68a3      	ldr	r3, [r4, #8]
 8001862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001866:	4632      	mov	r2, r6
 8001868:	463b      	mov	r3, r7
 800186a:	f04f 0180 	mov.w	r1, #128	; 0x80
 800186e:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001870:	d10e      	bne.n	8001890 <HAL_UART_Transmit+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001872:	f7ff ff69 	bl	8001748 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001876:	b110      	cbz	r0, 800187e <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8001878:	2003      	movs	r0, #3
 800187a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800187e:	882b      	ldrh	r3, [r5, #0]
 8001880:	6822      	ldr	r2, [r4, #0]
 8001882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001886:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001888:	6923      	ldr	r3, [r4, #16]
 800188a:	b943      	cbnz	r3, 800189e <HAL_UART_Transmit+0xaa>
          pData += 2U;
 800188c:	3502      	adds	r5, #2
 800188e:	e7d2      	b.n	8001836 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001890:	f7ff ff5a 	bl	8001748 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001894:	2800      	cmp	r0, #0
 8001896:	d1ef      	bne.n	8001878 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001898:	6823      	ldr	r3, [r4, #0]
 800189a:	782a      	ldrb	r2, [r5, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	3501      	adds	r5, #1
 80018a0:	e7c9      	b.n	8001836 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80018a2:	2001      	movs	r0, #1
 80018a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80018a8:	2002      	movs	r0, #2
}
 80018aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080018b0 <__io_putchar>:
/* for DMA uncomment the line below */
	adc_val = buffer;
}

int __io_putchar(int ch)
 {
 80018b0:	b513      	push	{r0, r1, r4, lr}
  uint8_t c[1];
  c[0] = ch & 0x00FF;
 80018b2:	a902      	add	r1, sp, #8
 {
 80018b4:	4604      	mov	r4, r0
  c[0] = ch & 0x00FF;
 80018b6:	f801 0d04 	strb.w	r0, [r1, #-4]!
  HAL_UART_Transmit(&huart2, &*c, 1, 10);
 80018ba:	230a      	movs	r3, #10
 80018bc:	2201      	movs	r2, #1
 80018be:	4803      	ldr	r0, [pc, #12]	; (80018cc <__io_putchar+0x1c>)
 80018c0:	f7ff ff98 	bl	80017f4 <HAL_UART_Transmit>
  return ch;
 }
 80018c4:	4620      	mov	r0, r4
 80018c6:	b002      	add	sp, #8
 80018c8:	bd10      	pop	{r4, pc}
 80018ca:	bf00      	nop
 80018cc:	2000014c 	.word	0x2000014c

080018d0 <_write>:

 int _write(int file,char *ptr, int len)
 {
 80018d0:	b570      	push	{r4, r5, r6, lr}
 80018d2:	460e      	mov	r6, r1
 80018d4:	4615      	mov	r5, r2
  int DataIdx;
  for(DataIdx= 0; DataIdx< len; DataIdx++)
 80018d6:	460c      	mov	r4, r1
 80018d8:	1ba3      	subs	r3, r4, r6
 80018da:	429d      	cmp	r5, r3
 80018dc:	dc01      	bgt.n	80018e2 <_write+0x12>
  {
  __io_putchar(*ptr++);
  }
 return len;
 }
 80018de:	4628      	mov	r0, r5
 80018e0:	bd70      	pop	{r4, r5, r6, pc}
  __io_putchar(*ptr++);
 80018e2:	f814 0b01 	ldrb.w	r0, [r4], #1
 80018e6:	f7ff ffe3 	bl	80018b0 <__io_putchar>
 80018ea:	e7f5      	b.n	80018d8 <_write+0x8>

080018ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018ec:	b530      	push	{r4, r5, lr}
 80018ee:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018f0:	2234      	movs	r2, #52	; 0x34
 80018f2:	2100      	movs	r1, #0
 80018f4:	a807      	add	r0, sp, #28
 80018f6:	f000 fac1 	bl	8001e7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018fa:	2100      	movs	r1, #0
 80018fc:	2214      	movs	r2, #20
 80018fe:	a802      	add	r0, sp, #8
 8001900:	f000 fabc 	bl	8001e7c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001904:	2500      	movs	r5, #0
 8001906:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <SystemClock_Config+0x8c>)
 8001908:	9500      	str	r5, [sp, #0]
 800190a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800190c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001910:	641a      	str	r2, [r3, #64]	; 0x40
 8001912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001914:	4a19      	ldr	r2, [pc, #100]	; (800197c <SystemClock_Config+0x90>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800191e:	9501      	str	r5, [sp, #4]
 8001920:	6813      	ldr	r3, [r2, #0]
 8001922:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001926:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	6813      	ldr	r3, [r2, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800192e:	950e      	str	r5, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001930:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001934:	9301      	str	r3, [sp, #4]
 8001936:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001938:	2301      	movs	r3, #1
 800193a:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800193c:	2310      	movs	r3, #16
 800193e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001940:	2308      	movs	r3, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001942:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001944:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001946:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001948:	2348      	movs	r3, #72	; 0x48
 800194a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800194c:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800194e:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001950:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001952:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001954:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001956:	f7ff fc43 	bl	80011e0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800195a:	230f      	movs	r3, #15
 800195c:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800195e:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001964:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001966:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001968:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800196a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800196c:	9506      	str	r5, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800196e:	f7ff fb35 	bl	8000fdc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001972:	b015      	add	sp, #84	; 0x54
 8001974:	bd30      	pop	{r4, r5, pc}
 8001976:	bf00      	nop
 8001978:	40023800 	.word	0x40023800
 800197c:	40007000 	.word	0x40007000

08001980 <main>:
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 8001984:	f7fe fe40 	bl	8000608 <HAL_Init>
  SystemClock_Config();
 8001988:	f7ff ffb0 	bl	80018ec <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	2214      	movs	r2, #20

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800198e:	2500      	movs	r5, #0
 8001990:	4c7a      	ldr	r4, [pc, #488]	; (8001b7c <main+0x1fc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001992:	2100      	movs	r1, #0
 8001994:	eb0d 0002 	add.w	r0, sp, r2
 8001998:	f000 fa70 	bl	8001e7c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800199c:	9501      	str	r5, [sp, #4]
 800199e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019a0:	4877      	ldr	r0, [pc, #476]	; (8001b80 <main+0x200>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a2:	f043 0304 	orr.w	r3, r3, #4
 80019a6:	6323      	str	r3, [r4, #48]	; 0x30
 80019a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	9301      	str	r3, [sp, #4]
 80019b0:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019b2:	9502      	str	r5, [sp, #8]
 80019b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80019b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019ba:	6323      	str	r3, [r4, #48]	; 0x30
 80019bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80019be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019c2:	9302      	str	r3, [sp, #8]
 80019c4:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c6:	9503      	str	r5, [sp, #12]
 80019c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	6323      	str	r3, [r4, #48]	; 0x30
 80019d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	9303      	str	r3, [sp, #12]
 80019d8:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019da:	9504      	str	r5, [sp, #16]
 80019dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80019de:	f043 0302 	orr.w	r3, r3, #2
 80019e2:	6323      	str	r3, [r4, #48]	; 0x30
 80019e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80019e6:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019ea:	462a      	mov	r2, r5
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ec:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019ee:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f0:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019f2:	f7ff faed 	bl	8000fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019fa:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019fc:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019fe:	4b61      	ldr	r3, [pc, #388]	; (8001b84 <main+0x204>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a00:	4861      	ldr	r0, [pc, #388]	; (8001b88 <main+0x208>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a02:	9306      	str	r3, [sp, #24]

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a04:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a08:	f7ff fa08 	bl	8000e1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a0c:	2320      	movs	r3, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	a905      	add	r1, sp, #20
 8001a10:	485b      	ldr	r0, [pc, #364]	; (8001b80 <main+0x200>)
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a12:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a14:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a1a:	f7ff f9ff 	bl	8000e1c <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a1e:	9500      	str	r5, [sp, #0]
 8001a20:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a26:	6323      	str	r3, [r4, #48]	; 0x30
 8001a28:	6b23      	ldr	r3, [r4, #48]	; 0x30
  hadc1.Instance = ADC1;
 8001a2a:	4c58      	ldr	r4, [pc, #352]	; (8001b8c <main+0x20c>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001a30:	462a      	mov	r2, r5
 8001a32:	4629      	mov	r1, r5
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a34:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001a36:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a38:	9b00      	ldr	r3, [sp, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001a3a:	2710      	movs	r7, #16
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001a3c:	f7ff f848 	bl	8000ad0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001a40:	2038      	movs	r0, #56	; 0x38
 8001a42:	f7ff f879 	bl	8000b38 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001a46:	463a      	mov	r2, r7
 8001a48:	4629      	mov	r1, r5
 8001a4a:	a805      	add	r0, sp, #20
 8001a4c:	f000 fa16 	bl	8001e7c <memset>
  hadc1.Instance = ADC1;
 8001a50:	4b4f      	ldr	r3, [pc, #316]	; (8001b90 <main+0x210>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a52:	60a5      	str	r5, [r4, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a54:	e884 0028 	stmia.w	r4, {r3, r5}
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a58:	4620      	mov	r0, r4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a5a:	4b4e      	ldr	r3, [pc, #312]	; (8001b94 <main+0x214>)
 8001a5c:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.ScanConvMode = ENABLE;
 8001a5e:	6126      	str	r6, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a60:	7626      	strb	r6, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a62:	f884 5020 	strb.w	r5, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a66:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a68:	60e5      	str	r5, [r4, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a6a:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a6e:	6166      	str	r6, [r4, #20]
  hadc1.Init.NbrOfConversion = 16;
 8001a70:	61e7      	str	r7, [r4, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a72:	f7fe fe09 	bl	8000688 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a76:	a905      	add	r1, sp, #20
 8001a78:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 8001a7a:	9505      	str	r5, [sp, #20]
  sConfig.Rank = 1;
 8001a7c:	9606      	str	r6, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a7e:	9507      	str	r5, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a80:	f7fe ff72 	bl	8000968 <HAL_ADC_ConfigChannel>
  sConfig.Rank = 2;
 8001a84:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a86:	a905      	add	r1, sp, #20
 8001a88:	4620      	mov	r0, r4
  sConfig.Rank = 2;
 8001a8a:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a8c:	f7fe ff6c 	bl	8000968 <HAL_ADC_ConfigChannel>
  sConfig.Rank = 3;
 8001a90:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a92:	a905      	add	r1, sp, #20
 8001a94:	4620      	mov	r0, r4
  sConfig.Rank = 3;
 8001a96:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a98:	f7fe ff66 	bl	8000968 <HAL_ADC_ConfigChannel>
  sConfig.Rank = 4;
 8001a9c:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a9e:	a905      	add	r1, sp, #20
 8001aa0:	4620      	mov	r0, r4
  sConfig.Rank = 4;
 8001aa2:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aa4:	f7fe ff60 	bl	8000968 <HAL_ADC_ConfigChannel>
  sConfig.Rank = 5;
 8001aa8:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aaa:	a905      	add	r1, sp, #20
 8001aac:	4620      	mov	r0, r4
  sConfig.Rank = 5;
 8001aae:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ab0:	f7fe ff5a 	bl	8000968 <HAL_ADC_ConfigChannel>
  sConfig.Rank = 6;
 8001ab4:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ab6:	a905      	add	r1, sp, #20
 8001ab8:	4620      	mov	r0, r4
  sConfig.Rank = 6;
 8001aba:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001abc:	f7fe ff54 	bl	8000968 <HAL_ADC_ConfigChannel>
  sConfig.Rank = 7;
 8001ac0:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ac2:	a905      	add	r1, sp, #20
 8001ac4:	4620      	mov	r0, r4
  sConfig.Rank = 7;
 8001ac6:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ac8:	f7fe ff4e 	bl	8000968 <HAL_ADC_ConfigChannel>
  sConfig.Rank = 8;
 8001acc:	2308      	movs	r3, #8
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ace:	a905      	add	r1, sp, #20
 8001ad0:	4620      	mov	r0, r4
  sConfig.Rank = 8;
 8001ad2:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ad4:	f7fe ff48 	bl	8000968 <HAL_ADC_ConfigChannel>
  sConfig.Rank = 9;
 8001ad8:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ada:	a905      	add	r1, sp, #20
 8001adc:	4620      	mov	r0, r4
  sConfig.Rank = 9;
 8001ade:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ae0:	f7fe ff42 	bl	8000968 <HAL_ADC_ConfigChannel>
  sConfig.Rank = 10;
 8001ae4:	230a      	movs	r3, #10
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ae6:	a905      	add	r1, sp, #20
 8001ae8:	4620      	mov	r0, r4
  sConfig.Rank = 10;
 8001aea:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aec:	f7fe ff3c 	bl	8000968 <HAL_ADC_ConfigChannel>
  sConfig.Rank = 11;
 8001af0:	230b      	movs	r3, #11
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001af2:	a905      	add	r1, sp, #20
 8001af4:	4620      	mov	r0, r4
  sConfig.Rank = 11;
 8001af6:	9306      	str	r3, [sp, #24]
  sConfig.Rank = 12;
 8001af8:	260c      	movs	r6, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001afa:	f7fe ff35 	bl	8000968 <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001afe:	a905      	add	r1, sp, #20
 8001b00:	4620      	mov	r0, r4
  sConfig.Rank = 12;
 8001b02:	9606      	str	r6, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b04:	f7fe ff30 	bl	8000968 <HAL_ADC_ConfigChannel>
  sConfig.Rank = 13;
 8001b08:	230d      	movs	r3, #13
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b0a:	a905      	add	r1, sp, #20
 8001b0c:	4620      	mov	r0, r4
  sConfig.Rank = 13;
 8001b0e:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b10:	f7fe ff2a 	bl	8000968 <HAL_ADC_ConfigChannel>
  sConfig.Rank = 14;
 8001b14:	230e      	movs	r3, #14
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b16:	a905      	add	r1, sp, #20
 8001b18:	4620      	mov	r0, r4
  sConfig.Rank = 14;
 8001b1a:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b1c:	f7fe ff24 	bl	8000968 <HAL_ADC_ConfigChannel>
  sConfig.Rank = 15;
 8001b20:	230f      	movs	r3, #15
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b22:	a905      	add	r1, sp, #20
 8001b24:	4620      	mov	r0, r4
  sConfig.Rank = 15;
 8001b26:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b28:	f7fe ff1e 	bl	8000968 <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b2c:	a905      	add	r1, sp, #20
 8001b2e:	4620      	mov	r0, r4
  sConfig.Rank = 16;
 8001b30:	9706      	str	r7, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b32:	f7fe ff19 	bl	8000968 <HAL_ADC_ConfigChannel>
  huart2.Instance = USART2;
 8001b36:	4818      	ldr	r0, [pc, #96]	; (8001b98 <main+0x218>)
  huart2.Init.BaudRate = 115200;
 8001b38:	4a18      	ldr	r2, [pc, #96]	; (8001b9c <main+0x21c>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b3a:	6085      	str	r5, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8001b3c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b40:	60c5      	str	r5, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b42:	6105      	str	r5, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b44:	6146      	str	r6, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b46:	6185      	str	r5, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b48:	61c5      	str	r5, [r0, #28]
  huart2.Init.BaudRate = 115200;
 8001b4a:	e880 000c 	stmia.w	r0, {r2, r3}
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b4e:	f7ff fe23 	bl	8001798 <HAL_UART_Init>
	  adc_val = HAL_ADC_GetValue(&hadc1);  // get the adc value
 8001b52:	4e13      	ldr	r6, [pc, #76]	; (8001ba0 <main+0x220>)
		printf("ADC_Value == %d \n\r", adc_val);
 8001b54:	4d13      	ldr	r5, [pc, #76]	; (8001ba4 <main+0x224>)
		HAL_ADC_Start (&hadc1);
 8001b56:	4620      	mov	r0, r4
 8001b58:	f7fe fe3c 	bl	80007d4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);  // poll for conversion
 8001b5c:	210a      	movs	r1, #10
 8001b5e:	4620      	mov	r0, r4
 8001b60:	f7fe feae 	bl	80008c0 <HAL_ADC_PollForConversion>
	  adc_val = HAL_ADC_GetValue(&hadc1);  // get the adc value
 8001b64:	4620      	mov	r0, r4
 8001b66:	f7fe fefb 	bl	8000960 <HAL_ADC_GetValue>
 8001b6a:	4601      	mov	r1, r0
 8001b6c:	6030      	str	r0, [r6, #0]
		printf("ADC_Value == %d \n\r", adc_val);
 8001b6e:	4628      	mov	r0, r5
 8001b70:	f000 f98c 	bl	8001e8c <iprintf>
		HAL_Delay (50);  // wait for 500ms
 8001b74:	2032      	movs	r0, #50	; 0x32
 8001b76:	f7fe fd73 	bl	8000660 <HAL_Delay>
 8001b7a:	e7ec      	b.n	8001b56 <main+0x1d6>
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40020000 	.word	0x40020000
 8001b84:	10210000 	.word	0x10210000
 8001b88:	40020800 	.word	0x40020800
 8001b8c:	200000a0 	.word	0x200000a0
 8001b90:	40012000 	.word	0x40012000
 8001b94:	0f000001 	.word	0x0f000001
 8001b98:	2000014c 	.word	0x2000014c
 8001b9c:	40004400 	.word	0x40004400
 8001ba0:	2000009c 	.word	0x2000009c
 8001ba4:	08002c9c 	.word	0x08002c9c

08001ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba8:	4770      	bx	lr
	...

08001bac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bac:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bae:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <HAL_MspInit+0x3c>)
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	9100      	str	r1, [sp, #0]
 8001bb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bba:	645a      	str	r2, [r3, #68]	; 0x44
 8001bbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bbe:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001bc2:	9200      	str	r2, [sp, #0]
 8001bc4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bc6:	9101      	str	r1, [sp, #4]
 8001bc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001bce:	641a      	str	r2, [r3, #64]	; 0x40
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd6:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001bd8:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bda:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001bdc:	f7fe ff66 	bl	8000aac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001be0:	b003      	add	sp, #12
 8001be2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800

08001bec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bec:	b570      	push	{r4, r5, r6, lr}
 8001bee:	4606      	mov	r6, r0
 8001bf0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf2:	2214      	movs	r2, #20
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	a803      	add	r0, sp, #12
 8001bf8:	f000 f940 	bl	8001e7c <memset>
  if(hadc->Instance==ADC1)
 8001bfc:	6832      	ldr	r2, [r6, #0]
 8001bfe:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <HAL_ADC_MspInit+0x94>)
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d13a      	bne.n	8001c7a <HAL_ADC_MspInit+0x8e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c04:	2500      	movs	r5, #0
 8001c06:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001c0a:	9501      	str	r5, [sp, #4]
 8001c0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0e:	481d      	ldr	r0, [pc, #116]	; (8001c84 <HAL_ADC_MspInit+0x98>)

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001c10:	4c1d      	ldr	r4, [pc, #116]	; (8001c88 <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c16:	645a      	str	r2, [r3, #68]	; 0x44
 8001c18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c1a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001c1e:	9201      	str	r2, [sp, #4]
 8001c20:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c22:	9502      	str	r5, [sp, #8]
 8001c24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c26:	f042 0201 	orr.w	r2, r2, #1
 8001c2a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	9302      	str	r3, [sp, #8]
 8001c34:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c36:	2301      	movs	r3, #1
 8001c38:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c40:	f7ff f8ec 	bl	8000e1c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8001c44:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <HAL_ADC_MspInit+0xa0>)
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c46:	60a5      	str	r5, [r4, #8]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001c48:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c50:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c56:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c5c:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c5e:	4620      	mov	r0, r4
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c60:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c64:	60e5      	str	r5, [r4, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c66:	61e3      	str	r3, [r4, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c68:	6225      	str	r5, [r4, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c6a:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c6c:	f7fe ff9e 	bl	8000bac <HAL_DMA_Init>
 8001c70:	b108      	cbz	r0, 8001c76 <HAL_ADC_MspInit+0x8a>
    {
      Error_Handler();
 8001c72:	f7ff ff99 	bl	8001ba8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c76:	63b4      	str	r4, [r6, #56]	; 0x38
 8001c78:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c7a:	b008      	add	sp, #32
 8001c7c:	bd70      	pop	{r4, r5, r6, pc}
 8001c7e:	bf00      	nop
 8001c80:	40012000 	.word	0x40012000
 8001c84:	40020000 	.word	0x40020000
 8001c88:	200000ec 	.word	0x200000ec
 8001c8c:	40026410 	.word	0x40026410

08001c90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c90:	b510      	push	{r4, lr}
 8001c92:	4604      	mov	r4, r0
 8001c94:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c96:	2214      	movs	r2, #20
 8001c98:	2100      	movs	r1, #0
 8001c9a:	a803      	add	r0, sp, #12
 8001c9c:	f000 f8ee 	bl	8001e7c <memset>
  if(huart->Instance==USART2)
 8001ca0:	6822      	ldr	r2, [r4, #0]
 8001ca2:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <HAL_UART_MspInit+0x68>)
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d124      	bne.n	8001cf2 <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ca8:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001cac:	2100      	movs	r1, #0
 8001cae:	9101      	str	r1, [sp, #4]
 8001cb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb2:	4812      	ldr	r0, [pc, #72]	; (8001cfc <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cb4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001cb8:	641a      	str	r2, [r3, #64]	; 0x40
 8001cba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cbc:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001cc0:	9201      	str	r2, [sp, #4]
 8001cc2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc4:	9102      	str	r1, [sp, #8]
 8001cc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cc8:	f042 0201 	orr.w	r2, r2, #1
 8001ccc:	631a      	str	r2, [r3, #48]	; 0x30
 8001cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	9302      	str	r3, [sp, #8]
 8001cd6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001cd8:	230c      	movs	r3, #12
 8001cda:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cea:	2307      	movs	r3, #7
 8001cec:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cee:	f7ff f895 	bl	8000e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cf2:	b008      	add	sp, #32
 8001cf4:	bd10      	pop	{r4, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40004400 	.word	0x40004400
 8001cfc:	40020000 	.word	0x40020000

08001d00 <NMI_Handler>:
 8001d00:	4770      	bx	lr

08001d02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d02:	e7fe      	b.n	8001d02 <HardFault_Handler>

08001d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d04:	e7fe      	b.n	8001d04 <MemManage_Handler>

08001d06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d06:	e7fe      	b.n	8001d06 <BusFault_Handler>

08001d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d08:	e7fe      	b.n	8001d08 <UsageFault_Handler>

08001d0a <SVC_Handler>:
 8001d0a:	4770      	bx	lr

08001d0c <DebugMon_Handler>:
 8001d0c:	4770      	bx	lr

08001d0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d0e:	4770      	bx	lr

08001d10 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d10:	f7fe bc94 	b.w	800063c <HAL_IncTick>

08001d14 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d14:	4801      	ldr	r0, [pc, #4]	; (8001d1c <DMA2_Stream0_IRQHandler+0x8>)
 8001d16:	f7fe bfc7 	b.w	8000ca8 <HAL_DMA_IRQHandler>
 8001d1a:	bf00      	nop
 8001d1c:	200000ec 	.word	0x200000ec

08001d20 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d20:	b570      	push	{r4, r5, r6, lr}
 8001d22:	460e      	mov	r6, r1
 8001d24:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d26:	460c      	mov	r4, r1
 8001d28:	1ba3      	subs	r3, r4, r6
 8001d2a:	429d      	cmp	r5, r3
 8001d2c:	dc01      	bgt.n	8001d32 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001d2e:	4628      	mov	r0, r5
 8001d30:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001d32:	f3af 8000 	nop.w
 8001d36:	f804 0b01 	strb.w	r0, [r4], #1
 8001d3a:	e7f5      	b.n	8001d28 <_read+0x8>

08001d3c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001d3c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <_sbrk+0x2c>)
 8001d40:	6819      	ldr	r1, [r3, #0]
{
 8001d42:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001d44:	b909      	cbnz	r1, 8001d4a <_sbrk+0xe>
		heap_end = &end;
 8001d46:	4909      	ldr	r1, [pc, #36]	; (8001d6c <_sbrk+0x30>)
 8001d48:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8001d4a:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001d4c:	4669      	mov	r1, sp
 8001d4e:	4402      	add	r2, r0
 8001d50:	428a      	cmp	r2, r1
 8001d52:	d906      	bls.n	8001d62 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001d54:	f000 f868 	bl	8001e28 <__errno>
 8001d58:	230c      	movs	r3, #12
 8001d5a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d60:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8001d62:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001d64:	bd08      	pop	{r3, pc}
 8001d66:	bf00      	nop
 8001d68:	2000008c 	.word	0x2000008c
 8001d6c:	20000190 	.word	0x20000190

08001d70 <_close>:

int _close(int file)
{
	return -1;
}
 8001d70:	f04f 30ff 	mov.w	r0, #4294967295
 8001d74:	4770      	bx	lr

08001d76 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001d76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d7a:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	4770      	bx	lr

08001d80 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001d80:	2001      	movs	r0, #1
 8001d82:	4770      	bx	lr

08001d84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001d84:	2000      	movs	r0, #0
 8001d86:	4770      	bx	lr

08001d88 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d88:	490f      	ldr	r1, [pc, #60]	; (8001dc8 <SystemInit+0x40>)
 8001d8a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001d8e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001d96:	4b0d      	ldr	r3, [pc, #52]	; (8001dcc <SystemInit+0x44>)
 8001d98:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d9a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001d9c:	f042 0201 	orr.w	r2, r2, #1
 8001da0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001da2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001daa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001dae:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001db0:	4a07      	ldr	r2, [pc, #28]	; (8001dd0 <SystemInit+0x48>)
 8001db2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001dba:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001dbc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001dbe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001dc2:	608b      	str	r3, [r1, #8]
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	e000ed00 	.word	0xe000ed00
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	24003010 	.word	0x24003010

08001dd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001dd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001dd8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001dda:	e003      	b.n	8001de4 <LoopCopyDataInit>

08001ddc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001dde:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001de0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001de2:	3104      	adds	r1, #4

08001de4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001de4:	480b      	ldr	r0, [pc, #44]	; (8001e14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001de6:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001de8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001dea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001dec:	d3f6      	bcc.n	8001ddc <CopyDataInit>
  ldr  r2, =_sbss
 8001dee:	4a0b      	ldr	r2, [pc, #44]	; (8001e1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001df0:	e002      	b.n	8001df8 <LoopFillZerobss>

08001df2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001df2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001df4:	f842 3b04 	str.w	r3, [r2], #4

08001df8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001df8:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001dfa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001dfc:	d3f9      	bcc.n	8001df2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001dfe:	f7ff ffc3 	bl	8001d88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e02:	f000 f817 	bl	8001e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e06:	f7ff fdbb 	bl	8001980 <main>
  bx  lr    
 8001e0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e0c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001e10:	08002d70 	.word	0x08002d70
  ldr  r0, =_sdata
 8001e14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e18:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001e1c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001e20:	20000190 	.word	0x20000190

08001e24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e24:	e7fe      	b.n	8001e24 <ADC_IRQHandler>
	...

08001e28 <__errno>:
 8001e28:	4b01      	ldr	r3, [pc, #4]	; (8001e30 <__errno+0x8>)
 8001e2a:	6818      	ldr	r0, [r3, #0]
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	2000000c 	.word	0x2000000c

08001e34 <__libc_init_array>:
 8001e34:	b570      	push	{r4, r5, r6, lr}
 8001e36:	4e0d      	ldr	r6, [pc, #52]	; (8001e6c <__libc_init_array+0x38>)
 8001e38:	4c0d      	ldr	r4, [pc, #52]	; (8001e70 <__libc_init_array+0x3c>)
 8001e3a:	1ba4      	subs	r4, r4, r6
 8001e3c:	10a4      	asrs	r4, r4, #2
 8001e3e:	2500      	movs	r5, #0
 8001e40:	42a5      	cmp	r5, r4
 8001e42:	d109      	bne.n	8001e58 <__libc_init_array+0x24>
 8001e44:	4e0b      	ldr	r6, [pc, #44]	; (8001e74 <__libc_init_array+0x40>)
 8001e46:	4c0c      	ldr	r4, [pc, #48]	; (8001e78 <__libc_init_array+0x44>)
 8001e48:	f000 ff18 	bl	8002c7c <_init>
 8001e4c:	1ba4      	subs	r4, r4, r6
 8001e4e:	10a4      	asrs	r4, r4, #2
 8001e50:	2500      	movs	r5, #0
 8001e52:	42a5      	cmp	r5, r4
 8001e54:	d105      	bne.n	8001e62 <__libc_init_array+0x2e>
 8001e56:	bd70      	pop	{r4, r5, r6, pc}
 8001e58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e5c:	4798      	blx	r3
 8001e5e:	3501      	adds	r5, #1
 8001e60:	e7ee      	b.n	8001e40 <__libc_init_array+0xc>
 8001e62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e66:	4798      	blx	r3
 8001e68:	3501      	adds	r5, #1
 8001e6a:	e7f2      	b.n	8001e52 <__libc_init_array+0x1e>
 8001e6c:	08002d68 	.word	0x08002d68
 8001e70:	08002d68 	.word	0x08002d68
 8001e74:	08002d68 	.word	0x08002d68
 8001e78:	08002d6c 	.word	0x08002d6c

08001e7c <memset>:
 8001e7c:	4402      	add	r2, r0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d100      	bne.n	8001e86 <memset+0xa>
 8001e84:	4770      	bx	lr
 8001e86:	f803 1b01 	strb.w	r1, [r3], #1
 8001e8a:	e7f9      	b.n	8001e80 <memset+0x4>

08001e8c <iprintf>:
 8001e8c:	b40f      	push	{r0, r1, r2, r3}
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <iprintf+0x2c>)
 8001e90:	b513      	push	{r0, r1, r4, lr}
 8001e92:	681c      	ldr	r4, [r3, #0]
 8001e94:	b124      	cbz	r4, 8001ea0 <iprintf+0x14>
 8001e96:	69a3      	ldr	r3, [r4, #24]
 8001e98:	b913      	cbnz	r3, 8001ea0 <iprintf+0x14>
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	f000 f84e 	bl	8001f3c <__sinit>
 8001ea0:	ab05      	add	r3, sp, #20
 8001ea2:	9a04      	ldr	r2, [sp, #16]
 8001ea4:	68a1      	ldr	r1, [r4, #8]
 8001ea6:	9301      	str	r3, [sp, #4]
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	f000 f959 	bl	8002160 <_vfiprintf_r>
 8001eae:	b002      	add	sp, #8
 8001eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001eb4:	b004      	add	sp, #16
 8001eb6:	4770      	bx	lr
 8001eb8:	2000000c 	.word	0x2000000c

08001ebc <_cleanup_r>:
 8001ebc:	4901      	ldr	r1, [pc, #4]	; (8001ec4 <_cleanup_r+0x8>)
 8001ebe:	f000 b8a9 	b.w	8002014 <_fwalk_reent>
 8001ec2:	bf00      	nop
 8001ec4:	08002a35 	.word	0x08002a35

08001ec8 <std.isra.0>:
 8001ec8:	2300      	movs	r3, #0
 8001eca:	b510      	push	{r4, lr}
 8001ecc:	4604      	mov	r4, r0
 8001ece:	6003      	str	r3, [r0, #0]
 8001ed0:	6043      	str	r3, [r0, #4]
 8001ed2:	6083      	str	r3, [r0, #8]
 8001ed4:	8181      	strh	r1, [r0, #12]
 8001ed6:	6643      	str	r3, [r0, #100]	; 0x64
 8001ed8:	81c2      	strh	r2, [r0, #14]
 8001eda:	6103      	str	r3, [r0, #16]
 8001edc:	6143      	str	r3, [r0, #20]
 8001ede:	6183      	str	r3, [r0, #24]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	2208      	movs	r2, #8
 8001ee4:	305c      	adds	r0, #92	; 0x5c
 8001ee6:	f7ff ffc9 	bl	8001e7c <memset>
 8001eea:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <std.isra.0+0x38>)
 8001eec:	6263      	str	r3, [r4, #36]	; 0x24
 8001eee:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <std.isra.0+0x3c>)
 8001ef0:	62a3      	str	r3, [r4, #40]	; 0x28
 8001ef2:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <std.isra.0+0x40>)
 8001ef4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001ef6:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <std.isra.0+0x44>)
 8001ef8:	6224      	str	r4, [r4, #32]
 8001efa:	6323      	str	r3, [r4, #48]	; 0x30
 8001efc:	bd10      	pop	{r4, pc}
 8001efe:	bf00      	nop
 8001f00:	080026d9 	.word	0x080026d9
 8001f04:	080026fb 	.word	0x080026fb
 8001f08:	08002733 	.word	0x08002733
 8001f0c:	08002757 	.word	0x08002757

08001f10 <__sfmoreglue>:
 8001f10:	b570      	push	{r4, r5, r6, lr}
 8001f12:	1e4a      	subs	r2, r1, #1
 8001f14:	2568      	movs	r5, #104	; 0x68
 8001f16:	4355      	muls	r5, r2
 8001f18:	460e      	mov	r6, r1
 8001f1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001f1e:	f000 f897 	bl	8002050 <_malloc_r>
 8001f22:	4604      	mov	r4, r0
 8001f24:	b140      	cbz	r0, 8001f38 <__sfmoreglue+0x28>
 8001f26:	2100      	movs	r1, #0
 8001f28:	e880 0042 	stmia.w	r0, {r1, r6}
 8001f2c:	300c      	adds	r0, #12
 8001f2e:	60a0      	str	r0, [r4, #8]
 8001f30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001f34:	f7ff ffa2 	bl	8001e7c <memset>
 8001f38:	4620      	mov	r0, r4
 8001f3a:	bd70      	pop	{r4, r5, r6, pc}

08001f3c <__sinit>:
 8001f3c:	6983      	ldr	r3, [r0, #24]
 8001f3e:	b510      	push	{r4, lr}
 8001f40:	4604      	mov	r4, r0
 8001f42:	bb33      	cbnz	r3, 8001f92 <__sinit+0x56>
 8001f44:	6483      	str	r3, [r0, #72]	; 0x48
 8001f46:	64c3      	str	r3, [r0, #76]	; 0x4c
 8001f48:	6503      	str	r3, [r0, #80]	; 0x50
 8001f4a:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <__sinit+0x58>)
 8001f4c:	4a12      	ldr	r2, [pc, #72]	; (8001f98 <__sinit+0x5c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6282      	str	r2, [r0, #40]	; 0x28
 8001f52:	4298      	cmp	r0, r3
 8001f54:	bf04      	itt	eq
 8001f56:	2301      	moveq	r3, #1
 8001f58:	6183      	streq	r3, [r0, #24]
 8001f5a:	f000 f81f 	bl	8001f9c <__sfp>
 8001f5e:	6060      	str	r0, [r4, #4]
 8001f60:	4620      	mov	r0, r4
 8001f62:	f000 f81b 	bl	8001f9c <__sfp>
 8001f66:	60a0      	str	r0, [r4, #8]
 8001f68:	4620      	mov	r0, r4
 8001f6a:	f000 f817 	bl	8001f9c <__sfp>
 8001f6e:	2200      	movs	r2, #0
 8001f70:	60e0      	str	r0, [r4, #12]
 8001f72:	2104      	movs	r1, #4
 8001f74:	6860      	ldr	r0, [r4, #4]
 8001f76:	f7ff ffa7 	bl	8001ec8 <std.isra.0>
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	2109      	movs	r1, #9
 8001f7e:	68a0      	ldr	r0, [r4, #8]
 8001f80:	f7ff ffa2 	bl	8001ec8 <std.isra.0>
 8001f84:	2202      	movs	r2, #2
 8001f86:	2112      	movs	r1, #18
 8001f88:	68e0      	ldr	r0, [r4, #12]
 8001f8a:	f7ff ff9d 	bl	8001ec8 <std.isra.0>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	61a3      	str	r3, [r4, #24]
 8001f92:	bd10      	pop	{r4, pc}
 8001f94:	08002cc8 	.word	0x08002cc8
 8001f98:	08001ebd 	.word	0x08001ebd

08001f9c <__sfp>:
 8001f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f9e:	4b1c      	ldr	r3, [pc, #112]	; (8002010 <__sfp+0x74>)
 8001fa0:	681e      	ldr	r6, [r3, #0]
 8001fa2:	69b3      	ldr	r3, [r6, #24]
 8001fa4:	4607      	mov	r7, r0
 8001fa6:	b913      	cbnz	r3, 8001fae <__sfp+0x12>
 8001fa8:	4630      	mov	r0, r6
 8001faa:	f7ff ffc7 	bl	8001f3c <__sinit>
 8001fae:	3648      	adds	r6, #72	; 0x48
 8001fb0:	68b4      	ldr	r4, [r6, #8]
 8001fb2:	6873      	ldr	r3, [r6, #4]
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	d503      	bpl.n	8001fc0 <__sfp+0x24>
 8001fb8:	6833      	ldr	r3, [r6, #0]
 8001fba:	b133      	cbz	r3, 8001fca <__sfp+0x2e>
 8001fbc:	6836      	ldr	r6, [r6, #0]
 8001fbe:	e7f7      	b.n	8001fb0 <__sfp+0x14>
 8001fc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001fc4:	b16d      	cbz	r5, 8001fe2 <__sfp+0x46>
 8001fc6:	3468      	adds	r4, #104	; 0x68
 8001fc8:	e7f4      	b.n	8001fb4 <__sfp+0x18>
 8001fca:	2104      	movs	r1, #4
 8001fcc:	4638      	mov	r0, r7
 8001fce:	f7ff ff9f 	bl	8001f10 <__sfmoreglue>
 8001fd2:	6030      	str	r0, [r6, #0]
 8001fd4:	2800      	cmp	r0, #0
 8001fd6:	d1f1      	bne.n	8001fbc <__sfp+0x20>
 8001fd8:	230c      	movs	r3, #12
 8001fda:	603b      	str	r3, [r7, #0]
 8001fdc:	4604      	mov	r4, r0
 8001fde:	4620      	mov	r0, r4
 8001fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fe2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fe6:	81e3      	strh	r3, [r4, #14]
 8001fe8:	2301      	movs	r3, #1
 8001fea:	81a3      	strh	r3, [r4, #12]
 8001fec:	6665      	str	r5, [r4, #100]	; 0x64
 8001fee:	6025      	str	r5, [r4, #0]
 8001ff0:	60a5      	str	r5, [r4, #8]
 8001ff2:	6065      	str	r5, [r4, #4]
 8001ff4:	6125      	str	r5, [r4, #16]
 8001ff6:	6165      	str	r5, [r4, #20]
 8001ff8:	61a5      	str	r5, [r4, #24]
 8001ffa:	2208      	movs	r2, #8
 8001ffc:	4629      	mov	r1, r5
 8001ffe:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002002:	f7ff ff3b 	bl	8001e7c <memset>
 8002006:	6365      	str	r5, [r4, #52]	; 0x34
 8002008:	63a5      	str	r5, [r4, #56]	; 0x38
 800200a:	64a5      	str	r5, [r4, #72]	; 0x48
 800200c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800200e:	e7e6      	b.n	8001fde <__sfp+0x42>
 8002010:	08002cc8 	.word	0x08002cc8

08002014 <_fwalk_reent>:
 8002014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002018:	4680      	mov	r8, r0
 800201a:	4689      	mov	r9, r1
 800201c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002020:	2600      	movs	r6, #0
 8002022:	b914      	cbnz	r4, 800202a <_fwalk_reent+0x16>
 8002024:	4630      	mov	r0, r6
 8002026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800202a:	68a5      	ldr	r5, [r4, #8]
 800202c:	6867      	ldr	r7, [r4, #4]
 800202e:	3f01      	subs	r7, #1
 8002030:	d501      	bpl.n	8002036 <_fwalk_reent+0x22>
 8002032:	6824      	ldr	r4, [r4, #0]
 8002034:	e7f5      	b.n	8002022 <_fwalk_reent+0xe>
 8002036:	89ab      	ldrh	r3, [r5, #12]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d907      	bls.n	800204c <_fwalk_reent+0x38>
 800203c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002040:	3301      	adds	r3, #1
 8002042:	d003      	beq.n	800204c <_fwalk_reent+0x38>
 8002044:	4629      	mov	r1, r5
 8002046:	4640      	mov	r0, r8
 8002048:	47c8      	blx	r9
 800204a:	4306      	orrs	r6, r0
 800204c:	3568      	adds	r5, #104	; 0x68
 800204e:	e7ee      	b.n	800202e <_fwalk_reent+0x1a>

08002050 <_malloc_r>:
 8002050:	b570      	push	{r4, r5, r6, lr}
 8002052:	1ccd      	adds	r5, r1, #3
 8002054:	f025 0503 	bic.w	r5, r5, #3
 8002058:	3508      	adds	r5, #8
 800205a:	2d0c      	cmp	r5, #12
 800205c:	bf38      	it	cc
 800205e:	250c      	movcc	r5, #12
 8002060:	2d00      	cmp	r5, #0
 8002062:	4606      	mov	r6, r0
 8002064:	db01      	blt.n	800206a <_malloc_r+0x1a>
 8002066:	42a9      	cmp	r1, r5
 8002068:	d903      	bls.n	8002072 <_malloc_r+0x22>
 800206a:	230c      	movs	r3, #12
 800206c:	6033      	str	r3, [r6, #0]
 800206e:	2000      	movs	r0, #0
 8002070:	bd70      	pop	{r4, r5, r6, pc}
 8002072:	f000 fd7f 	bl	8002b74 <__malloc_lock>
 8002076:	4a23      	ldr	r2, [pc, #140]	; (8002104 <_malloc_r+0xb4>)
 8002078:	6814      	ldr	r4, [r2, #0]
 800207a:	4621      	mov	r1, r4
 800207c:	b991      	cbnz	r1, 80020a4 <_malloc_r+0x54>
 800207e:	4c22      	ldr	r4, [pc, #136]	; (8002108 <_malloc_r+0xb8>)
 8002080:	6823      	ldr	r3, [r4, #0]
 8002082:	b91b      	cbnz	r3, 800208c <_malloc_r+0x3c>
 8002084:	4630      	mov	r0, r6
 8002086:	f000 fb17 	bl	80026b8 <_sbrk_r>
 800208a:	6020      	str	r0, [r4, #0]
 800208c:	4629      	mov	r1, r5
 800208e:	4630      	mov	r0, r6
 8002090:	f000 fb12 	bl	80026b8 <_sbrk_r>
 8002094:	1c43      	adds	r3, r0, #1
 8002096:	d126      	bne.n	80020e6 <_malloc_r+0x96>
 8002098:	230c      	movs	r3, #12
 800209a:	6033      	str	r3, [r6, #0]
 800209c:	4630      	mov	r0, r6
 800209e:	f000 fd6a 	bl	8002b76 <__malloc_unlock>
 80020a2:	e7e4      	b.n	800206e <_malloc_r+0x1e>
 80020a4:	680b      	ldr	r3, [r1, #0]
 80020a6:	1b5b      	subs	r3, r3, r5
 80020a8:	d41a      	bmi.n	80020e0 <_malloc_r+0x90>
 80020aa:	2b0b      	cmp	r3, #11
 80020ac:	d90f      	bls.n	80020ce <_malloc_r+0x7e>
 80020ae:	600b      	str	r3, [r1, #0]
 80020b0:	50cd      	str	r5, [r1, r3]
 80020b2:	18cc      	adds	r4, r1, r3
 80020b4:	4630      	mov	r0, r6
 80020b6:	f000 fd5e 	bl	8002b76 <__malloc_unlock>
 80020ba:	f104 000b 	add.w	r0, r4, #11
 80020be:	1d23      	adds	r3, r4, #4
 80020c0:	f020 0007 	bic.w	r0, r0, #7
 80020c4:	1ac3      	subs	r3, r0, r3
 80020c6:	d01b      	beq.n	8002100 <_malloc_r+0xb0>
 80020c8:	425a      	negs	r2, r3
 80020ca:	50e2      	str	r2, [r4, r3]
 80020cc:	bd70      	pop	{r4, r5, r6, pc}
 80020ce:	428c      	cmp	r4, r1
 80020d0:	bf0d      	iteet	eq
 80020d2:	6863      	ldreq	r3, [r4, #4]
 80020d4:	684b      	ldrne	r3, [r1, #4]
 80020d6:	6063      	strne	r3, [r4, #4]
 80020d8:	6013      	streq	r3, [r2, #0]
 80020da:	bf18      	it	ne
 80020dc:	460c      	movne	r4, r1
 80020de:	e7e9      	b.n	80020b4 <_malloc_r+0x64>
 80020e0:	460c      	mov	r4, r1
 80020e2:	6849      	ldr	r1, [r1, #4]
 80020e4:	e7ca      	b.n	800207c <_malloc_r+0x2c>
 80020e6:	1cc4      	adds	r4, r0, #3
 80020e8:	f024 0403 	bic.w	r4, r4, #3
 80020ec:	42a0      	cmp	r0, r4
 80020ee:	d005      	beq.n	80020fc <_malloc_r+0xac>
 80020f0:	1a21      	subs	r1, r4, r0
 80020f2:	4630      	mov	r0, r6
 80020f4:	f000 fae0 	bl	80026b8 <_sbrk_r>
 80020f8:	3001      	adds	r0, #1
 80020fa:	d0cd      	beq.n	8002098 <_malloc_r+0x48>
 80020fc:	6025      	str	r5, [r4, #0]
 80020fe:	e7d9      	b.n	80020b4 <_malloc_r+0x64>
 8002100:	bd70      	pop	{r4, r5, r6, pc}
 8002102:	bf00      	nop
 8002104:	20000090 	.word	0x20000090
 8002108:	20000094 	.word	0x20000094

0800210c <__sfputc_r>:
 800210c:	6893      	ldr	r3, [r2, #8]
 800210e:	3b01      	subs	r3, #1
 8002110:	2b00      	cmp	r3, #0
 8002112:	b410      	push	{r4}
 8002114:	6093      	str	r3, [r2, #8]
 8002116:	da09      	bge.n	800212c <__sfputc_r+0x20>
 8002118:	6994      	ldr	r4, [r2, #24]
 800211a:	42a3      	cmp	r3, r4
 800211c:	db02      	blt.n	8002124 <__sfputc_r+0x18>
 800211e:	b2cb      	uxtb	r3, r1
 8002120:	2b0a      	cmp	r3, #10
 8002122:	d103      	bne.n	800212c <__sfputc_r+0x20>
 8002124:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002128:	f000 bb1a 	b.w	8002760 <__swbuf_r>
 800212c:	6813      	ldr	r3, [r2, #0]
 800212e:	1c58      	adds	r0, r3, #1
 8002130:	6010      	str	r0, [r2, #0]
 8002132:	7019      	strb	r1, [r3, #0]
 8002134:	b2c8      	uxtb	r0, r1
 8002136:	f85d 4b04 	ldr.w	r4, [sp], #4
 800213a:	4770      	bx	lr

0800213c <__sfputs_r>:
 800213c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800213e:	4606      	mov	r6, r0
 8002140:	460f      	mov	r7, r1
 8002142:	4614      	mov	r4, r2
 8002144:	18d5      	adds	r5, r2, r3
 8002146:	42ac      	cmp	r4, r5
 8002148:	d101      	bne.n	800214e <__sfputs_r+0x12>
 800214a:	2000      	movs	r0, #0
 800214c:	e007      	b.n	800215e <__sfputs_r+0x22>
 800214e:	463a      	mov	r2, r7
 8002150:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002154:	4630      	mov	r0, r6
 8002156:	f7ff ffd9 	bl	800210c <__sfputc_r>
 800215a:	1c43      	adds	r3, r0, #1
 800215c:	d1f3      	bne.n	8002146 <__sfputs_r+0xa>
 800215e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002160 <_vfiprintf_r>:
 8002160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002164:	b09d      	sub	sp, #116	; 0x74
 8002166:	460c      	mov	r4, r1
 8002168:	4617      	mov	r7, r2
 800216a:	9303      	str	r3, [sp, #12]
 800216c:	4606      	mov	r6, r0
 800216e:	b118      	cbz	r0, 8002178 <_vfiprintf_r+0x18>
 8002170:	6983      	ldr	r3, [r0, #24]
 8002172:	b90b      	cbnz	r3, 8002178 <_vfiprintf_r+0x18>
 8002174:	f7ff fee2 	bl	8001f3c <__sinit>
 8002178:	4b7c      	ldr	r3, [pc, #496]	; (800236c <_vfiprintf_r+0x20c>)
 800217a:	429c      	cmp	r4, r3
 800217c:	d157      	bne.n	800222e <_vfiprintf_r+0xce>
 800217e:	6874      	ldr	r4, [r6, #4]
 8002180:	89a3      	ldrh	r3, [r4, #12]
 8002182:	0718      	lsls	r0, r3, #28
 8002184:	d55d      	bpl.n	8002242 <_vfiprintf_r+0xe2>
 8002186:	6923      	ldr	r3, [r4, #16]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d05a      	beq.n	8002242 <_vfiprintf_r+0xe2>
 800218c:	2300      	movs	r3, #0
 800218e:	9309      	str	r3, [sp, #36]	; 0x24
 8002190:	2320      	movs	r3, #32
 8002192:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002196:	2330      	movs	r3, #48	; 0x30
 8002198:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800219c:	f04f 0b01 	mov.w	fp, #1
 80021a0:	46b8      	mov	r8, r7
 80021a2:	4645      	mov	r5, r8
 80021a4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d155      	bne.n	8002258 <_vfiprintf_r+0xf8>
 80021ac:	ebb8 0a07 	subs.w	sl, r8, r7
 80021b0:	d00b      	beq.n	80021ca <_vfiprintf_r+0x6a>
 80021b2:	4653      	mov	r3, sl
 80021b4:	463a      	mov	r2, r7
 80021b6:	4621      	mov	r1, r4
 80021b8:	4630      	mov	r0, r6
 80021ba:	f7ff ffbf 	bl	800213c <__sfputs_r>
 80021be:	3001      	adds	r0, #1
 80021c0:	f000 80c4 	beq.w	800234c <_vfiprintf_r+0x1ec>
 80021c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80021c6:	4453      	add	r3, sl
 80021c8:	9309      	str	r3, [sp, #36]	; 0x24
 80021ca:	f898 3000 	ldrb.w	r3, [r8]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f000 80bc 	beq.w	800234c <_vfiprintf_r+0x1ec>
 80021d4:	2300      	movs	r3, #0
 80021d6:	f04f 32ff 	mov.w	r2, #4294967295
 80021da:	9304      	str	r3, [sp, #16]
 80021dc:	9307      	str	r3, [sp, #28]
 80021de:	9205      	str	r2, [sp, #20]
 80021e0:	9306      	str	r3, [sp, #24]
 80021e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80021e6:	931a      	str	r3, [sp, #104]	; 0x68
 80021e8:	2205      	movs	r2, #5
 80021ea:	7829      	ldrb	r1, [r5, #0]
 80021ec:	4860      	ldr	r0, [pc, #384]	; (8002370 <_vfiprintf_r+0x210>)
 80021ee:	f7fe f80f 	bl	8000210 <memchr>
 80021f2:	f105 0801 	add.w	r8, r5, #1
 80021f6:	9b04      	ldr	r3, [sp, #16]
 80021f8:	2800      	cmp	r0, #0
 80021fa:	d131      	bne.n	8002260 <_vfiprintf_r+0x100>
 80021fc:	06d9      	lsls	r1, r3, #27
 80021fe:	bf44      	itt	mi
 8002200:	2220      	movmi	r2, #32
 8002202:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002206:	071a      	lsls	r2, r3, #28
 8002208:	bf44      	itt	mi
 800220a:	222b      	movmi	r2, #43	; 0x2b
 800220c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002210:	782a      	ldrb	r2, [r5, #0]
 8002212:	2a2a      	cmp	r2, #42	; 0x2a
 8002214:	d02c      	beq.n	8002270 <_vfiprintf_r+0x110>
 8002216:	9a07      	ldr	r2, [sp, #28]
 8002218:	2100      	movs	r1, #0
 800221a:	200a      	movs	r0, #10
 800221c:	46a8      	mov	r8, r5
 800221e:	3501      	adds	r5, #1
 8002220:	f898 3000 	ldrb.w	r3, [r8]
 8002224:	3b30      	subs	r3, #48	; 0x30
 8002226:	2b09      	cmp	r3, #9
 8002228:	d96d      	bls.n	8002306 <_vfiprintf_r+0x1a6>
 800222a:	b371      	cbz	r1, 800228a <_vfiprintf_r+0x12a>
 800222c:	e026      	b.n	800227c <_vfiprintf_r+0x11c>
 800222e:	4b51      	ldr	r3, [pc, #324]	; (8002374 <_vfiprintf_r+0x214>)
 8002230:	429c      	cmp	r4, r3
 8002232:	d101      	bne.n	8002238 <_vfiprintf_r+0xd8>
 8002234:	68b4      	ldr	r4, [r6, #8]
 8002236:	e7a3      	b.n	8002180 <_vfiprintf_r+0x20>
 8002238:	4b4f      	ldr	r3, [pc, #316]	; (8002378 <_vfiprintf_r+0x218>)
 800223a:	429c      	cmp	r4, r3
 800223c:	bf08      	it	eq
 800223e:	68f4      	ldreq	r4, [r6, #12]
 8002240:	e79e      	b.n	8002180 <_vfiprintf_r+0x20>
 8002242:	4621      	mov	r1, r4
 8002244:	4630      	mov	r0, r6
 8002246:	f000 faef 	bl	8002828 <__swsetup_r>
 800224a:	2800      	cmp	r0, #0
 800224c:	d09e      	beq.n	800218c <_vfiprintf_r+0x2c>
 800224e:	f04f 30ff 	mov.w	r0, #4294967295
 8002252:	b01d      	add	sp, #116	; 0x74
 8002254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002258:	2b25      	cmp	r3, #37	; 0x25
 800225a:	d0a7      	beq.n	80021ac <_vfiprintf_r+0x4c>
 800225c:	46a8      	mov	r8, r5
 800225e:	e7a0      	b.n	80021a2 <_vfiprintf_r+0x42>
 8002260:	4a43      	ldr	r2, [pc, #268]	; (8002370 <_vfiprintf_r+0x210>)
 8002262:	1a80      	subs	r0, r0, r2
 8002264:	fa0b f000 	lsl.w	r0, fp, r0
 8002268:	4318      	orrs	r0, r3
 800226a:	9004      	str	r0, [sp, #16]
 800226c:	4645      	mov	r5, r8
 800226e:	e7bb      	b.n	80021e8 <_vfiprintf_r+0x88>
 8002270:	9a03      	ldr	r2, [sp, #12]
 8002272:	1d11      	adds	r1, r2, #4
 8002274:	6812      	ldr	r2, [r2, #0]
 8002276:	9103      	str	r1, [sp, #12]
 8002278:	2a00      	cmp	r2, #0
 800227a:	db01      	blt.n	8002280 <_vfiprintf_r+0x120>
 800227c:	9207      	str	r2, [sp, #28]
 800227e:	e004      	b.n	800228a <_vfiprintf_r+0x12a>
 8002280:	4252      	negs	r2, r2
 8002282:	f043 0302 	orr.w	r3, r3, #2
 8002286:	9207      	str	r2, [sp, #28]
 8002288:	9304      	str	r3, [sp, #16]
 800228a:	f898 3000 	ldrb.w	r3, [r8]
 800228e:	2b2e      	cmp	r3, #46	; 0x2e
 8002290:	d110      	bne.n	80022b4 <_vfiprintf_r+0x154>
 8002292:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002296:	2b2a      	cmp	r3, #42	; 0x2a
 8002298:	f108 0101 	add.w	r1, r8, #1
 800229c:	d137      	bne.n	800230e <_vfiprintf_r+0x1ae>
 800229e:	9b03      	ldr	r3, [sp, #12]
 80022a0:	1d1a      	adds	r2, r3, #4
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	9203      	str	r2, [sp, #12]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	bfb8      	it	lt
 80022aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80022ae:	f108 0802 	add.w	r8, r8, #2
 80022b2:	9305      	str	r3, [sp, #20]
 80022b4:	4d31      	ldr	r5, [pc, #196]	; (800237c <_vfiprintf_r+0x21c>)
 80022b6:	f898 1000 	ldrb.w	r1, [r8]
 80022ba:	2203      	movs	r2, #3
 80022bc:	4628      	mov	r0, r5
 80022be:	f7fd ffa7 	bl	8000210 <memchr>
 80022c2:	b140      	cbz	r0, 80022d6 <_vfiprintf_r+0x176>
 80022c4:	2340      	movs	r3, #64	; 0x40
 80022c6:	1b40      	subs	r0, r0, r5
 80022c8:	fa03 f000 	lsl.w	r0, r3, r0
 80022cc:	9b04      	ldr	r3, [sp, #16]
 80022ce:	4303      	orrs	r3, r0
 80022d0:	9304      	str	r3, [sp, #16]
 80022d2:	f108 0801 	add.w	r8, r8, #1
 80022d6:	f898 1000 	ldrb.w	r1, [r8]
 80022da:	4829      	ldr	r0, [pc, #164]	; (8002380 <_vfiprintf_r+0x220>)
 80022dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80022e0:	2206      	movs	r2, #6
 80022e2:	f108 0701 	add.w	r7, r8, #1
 80022e6:	f7fd ff93 	bl	8000210 <memchr>
 80022ea:	2800      	cmp	r0, #0
 80022ec:	d034      	beq.n	8002358 <_vfiprintf_r+0x1f8>
 80022ee:	4b25      	ldr	r3, [pc, #148]	; (8002384 <_vfiprintf_r+0x224>)
 80022f0:	bb03      	cbnz	r3, 8002334 <_vfiprintf_r+0x1d4>
 80022f2:	9b03      	ldr	r3, [sp, #12]
 80022f4:	3307      	adds	r3, #7
 80022f6:	f023 0307 	bic.w	r3, r3, #7
 80022fa:	3308      	adds	r3, #8
 80022fc:	9303      	str	r3, [sp, #12]
 80022fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002300:	444b      	add	r3, r9
 8002302:	9309      	str	r3, [sp, #36]	; 0x24
 8002304:	e74c      	b.n	80021a0 <_vfiprintf_r+0x40>
 8002306:	fb00 3202 	mla	r2, r0, r2, r3
 800230a:	2101      	movs	r1, #1
 800230c:	e786      	b.n	800221c <_vfiprintf_r+0xbc>
 800230e:	2300      	movs	r3, #0
 8002310:	9305      	str	r3, [sp, #20]
 8002312:	4618      	mov	r0, r3
 8002314:	250a      	movs	r5, #10
 8002316:	4688      	mov	r8, r1
 8002318:	3101      	adds	r1, #1
 800231a:	f898 2000 	ldrb.w	r2, [r8]
 800231e:	3a30      	subs	r2, #48	; 0x30
 8002320:	2a09      	cmp	r2, #9
 8002322:	d903      	bls.n	800232c <_vfiprintf_r+0x1cc>
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0c5      	beq.n	80022b4 <_vfiprintf_r+0x154>
 8002328:	9005      	str	r0, [sp, #20]
 800232a:	e7c3      	b.n	80022b4 <_vfiprintf_r+0x154>
 800232c:	fb05 2000 	mla	r0, r5, r0, r2
 8002330:	2301      	movs	r3, #1
 8002332:	e7f0      	b.n	8002316 <_vfiprintf_r+0x1b6>
 8002334:	ab03      	add	r3, sp, #12
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	4622      	mov	r2, r4
 800233a:	4b13      	ldr	r3, [pc, #76]	; (8002388 <_vfiprintf_r+0x228>)
 800233c:	a904      	add	r1, sp, #16
 800233e:	4630      	mov	r0, r6
 8002340:	f3af 8000 	nop.w
 8002344:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002348:	4681      	mov	r9, r0
 800234a:	d1d8      	bne.n	80022fe <_vfiprintf_r+0x19e>
 800234c:	89a3      	ldrh	r3, [r4, #12]
 800234e:	065b      	lsls	r3, r3, #25
 8002350:	f53f af7d 	bmi.w	800224e <_vfiprintf_r+0xee>
 8002354:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002356:	e77c      	b.n	8002252 <_vfiprintf_r+0xf2>
 8002358:	ab03      	add	r3, sp, #12
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	4622      	mov	r2, r4
 800235e:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <_vfiprintf_r+0x228>)
 8002360:	a904      	add	r1, sp, #16
 8002362:	4630      	mov	r0, r6
 8002364:	f000 f888 	bl	8002478 <_printf_i>
 8002368:	e7ec      	b.n	8002344 <_vfiprintf_r+0x1e4>
 800236a:	bf00      	nop
 800236c:	08002cec 	.word	0x08002cec
 8002370:	08002d2c 	.word	0x08002d2c
 8002374:	08002d0c 	.word	0x08002d0c
 8002378:	08002ccc 	.word	0x08002ccc
 800237c:	08002d32 	.word	0x08002d32
 8002380:	08002d36 	.word	0x08002d36
 8002384:	00000000 	.word	0x00000000
 8002388:	0800213d 	.word	0x0800213d

0800238c <_printf_common>:
 800238c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002390:	4691      	mov	r9, r2
 8002392:	461f      	mov	r7, r3
 8002394:	688a      	ldr	r2, [r1, #8]
 8002396:	690b      	ldr	r3, [r1, #16]
 8002398:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800239c:	4293      	cmp	r3, r2
 800239e:	bfb8      	it	lt
 80023a0:	4613      	movlt	r3, r2
 80023a2:	f8c9 3000 	str.w	r3, [r9]
 80023a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80023aa:	4606      	mov	r6, r0
 80023ac:	460c      	mov	r4, r1
 80023ae:	b112      	cbz	r2, 80023b6 <_printf_common+0x2a>
 80023b0:	3301      	adds	r3, #1
 80023b2:	f8c9 3000 	str.w	r3, [r9]
 80023b6:	6823      	ldr	r3, [r4, #0]
 80023b8:	0699      	lsls	r1, r3, #26
 80023ba:	bf42      	ittt	mi
 80023bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80023c0:	3302      	addmi	r3, #2
 80023c2:	f8c9 3000 	strmi.w	r3, [r9]
 80023c6:	6825      	ldr	r5, [r4, #0]
 80023c8:	f015 0506 	ands.w	r5, r5, #6
 80023cc:	d107      	bne.n	80023de <_printf_common+0x52>
 80023ce:	f104 0a19 	add.w	sl, r4, #25
 80023d2:	68e3      	ldr	r3, [r4, #12]
 80023d4:	f8d9 2000 	ldr.w	r2, [r9]
 80023d8:	1a9b      	subs	r3, r3, r2
 80023da:	429d      	cmp	r5, r3
 80023dc:	db29      	blt.n	8002432 <_printf_common+0xa6>
 80023de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80023e2:	6822      	ldr	r2, [r4, #0]
 80023e4:	3300      	adds	r3, #0
 80023e6:	bf18      	it	ne
 80023e8:	2301      	movne	r3, #1
 80023ea:	0692      	lsls	r2, r2, #26
 80023ec:	d42e      	bmi.n	800244c <_printf_common+0xc0>
 80023ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80023f2:	4639      	mov	r1, r7
 80023f4:	4630      	mov	r0, r6
 80023f6:	47c0      	blx	r8
 80023f8:	3001      	adds	r0, #1
 80023fa:	d021      	beq.n	8002440 <_printf_common+0xb4>
 80023fc:	6823      	ldr	r3, [r4, #0]
 80023fe:	68e5      	ldr	r5, [r4, #12]
 8002400:	f8d9 2000 	ldr.w	r2, [r9]
 8002404:	f003 0306 	and.w	r3, r3, #6
 8002408:	2b04      	cmp	r3, #4
 800240a:	bf08      	it	eq
 800240c:	1aad      	subeq	r5, r5, r2
 800240e:	68a3      	ldr	r3, [r4, #8]
 8002410:	6922      	ldr	r2, [r4, #16]
 8002412:	bf0c      	ite	eq
 8002414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002418:	2500      	movne	r5, #0
 800241a:	4293      	cmp	r3, r2
 800241c:	bfc4      	itt	gt
 800241e:	1a9b      	subgt	r3, r3, r2
 8002420:	18ed      	addgt	r5, r5, r3
 8002422:	f04f 0900 	mov.w	r9, #0
 8002426:	341a      	adds	r4, #26
 8002428:	454d      	cmp	r5, r9
 800242a:	d11b      	bne.n	8002464 <_printf_common+0xd8>
 800242c:	2000      	movs	r0, #0
 800242e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002432:	2301      	movs	r3, #1
 8002434:	4652      	mov	r2, sl
 8002436:	4639      	mov	r1, r7
 8002438:	4630      	mov	r0, r6
 800243a:	47c0      	blx	r8
 800243c:	3001      	adds	r0, #1
 800243e:	d103      	bne.n	8002448 <_printf_common+0xbc>
 8002440:	f04f 30ff 	mov.w	r0, #4294967295
 8002444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002448:	3501      	adds	r5, #1
 800244a:	e7c2      	b.n	80023d2 <_printf_common+0x46>
 800244c:	18e1      	adds	r1, r4, r3
 800244e:	1c5a      	adds	r2, r3, #1
 8002450:	2030      	movs	r0, #48	; 0x30
 8002452:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002456:	4422      	add	r2, r4
 8002458:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800245c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002460:	3302      	adds	r3, #2
 8002462:	e7c4      	b.n	80023ee <_printf_common+0x62>
 8002464:	2301      	movs	r3, #1
 8002466:	4622      	mov	r2, r4
 8002468:	4639      	mov	r1, r7
 800246a:	4630      	mov	r0, r6
 800246c:	47c0      	blx	r8
 800246e:	3001      	adds	r0, #1
 8002470:	d0e6      	beq.n	8002440 <_printf_common+0xb4>
 8002472:	f109 0901 	add.w	r9, r9, #1
 8002476:	e7d7      	b.n	8002428 <_printf_common+0x9c>

08002478 <_printf_i>:
 8002478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800247c:	4617      	mov	r7, r2
 800247e:	7e0a      	ldrb	r2, [r1, #24]
 8002480:	b085      	sub	sp, #20
 8002482:	2a6e      	cmp	r2, #110	; 0x6e
 8002484:	4698      	mov	r8, r3
 8002486:	4606      	mov	r6, r0
 8002488:	460c      	mov	r4, r1
 800248a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800248c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002490:	f000 80bc 	beq.w	800260c <_printf_i+0x194>
 8002494:	d81a      	bhi.n	80024cc <_printf_i+0x54>
 8002496:	2a63      	cmp	r2, #99	; 0x63
 8002498:	d02e      	beq.n	80024f8 <_printf_i+0x80>
 800249a:	d80a      	bhi.n	80024b2 <_printf_i+0x3a>
 800249c:	2a00      	cmp	r2, #0
 800249e:	f000 80c8 	beq.w	8002632 <_printf_i+0x1ba>
 80024a2:	2a58      	cmp	r2, #88	; 0x58
 80024a4:	f000 808a 	beq.w	80025bc <_printf_i+0x144>
 80024a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80024ac:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80024b0:	e02a      	b.n	8002508 <_printf_i+0x90>
 80024b2:	2a64      	cmp	r2, #100	; 0x64
 80024b4:	d001      	beq.n	80024ba <_printf_i+0x42>
 80024b6:	2a69      	cmp	r2, #105	; 0x69
 80024b8:	d1f6      	bne.n	80024a8 <_printf_i+0x30>
 80024ba:	6821      	ldr	r1, [r4, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	f011 0f80 	tst.w	r1, #128	; 0x80
 80024c2:	d023      	beq.n	800250c <_printf_i+0x94>
 80024c4:	1d11      	adds	r1, r2, #4
 80024c6:	6019      	str	r1, [r3, #0]
 80024c8:	6813      	ldr	r3, [r2, #0]
 80024ca:	e027      	b.n	800251c <_printf_i+0xa4>
 80024cc:	2a73      	cmp	r2, #115	; 0x73
 80024ce:	f000 80b4 	beq.w	800263a <_printf_i+0x1c2>
 80024d2:	d808      	bhi.n	80024e6 <_printf_i+0x6e>
 80024d4:	2a6f      	cmp	r2, #111	; 0x6f
 80024d6:	d02a      	beq.n	800252e <_printf_i+0xb6>
 80024d8:	2a70      	cmp	r2, #112	; 0x70
 80024da:	d1e5      	bne.n	80024a8 <_printf_i+0x30>
 80024dc:	680a      	ldr	r2, [r1, #0]
 80024de:	f042 0220 	orr.w	r2, r2, #32
 80024e2:	600a      	str	r2, [r1, #0]
 80024e4:	e003      	b.n	80024ee <_printf_i+0x76>
 80024e6:	2a75      	cmp	r2, #117	; 0x75
 80024e8:	d021      	beq.n	800252e <_printf_i+0xb6>
 80024ea:	2a78      	cmp	r2, #120	; 0x78
 80024ec:	d1dc      	bne.n	80024a8 <_printf_i+0x30>
 80024ee:	2278      	movs	r2, #120	; 0x78
 80024f0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80024f4:	496e      	ldr	r1, [pc, #440]	; (80026b0 <_printf_i+0x238>)
 80024f6:	e064      	b.n	80025c2 <_printf_i+0x14a>
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80024fe:	1d11      	adds	r1, r2, #4
 8002500:	6019      	str	r1, [r3, #0]
 8002502:	6813      	ldr	r3, [r2, #0]
 8002504:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002508:	2301      	movs	r3, #1
 800250a:	e0a3      	b.n	8002654 <_printf_i+0x1dc>
 800250c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002510:	f102 0104 	add.w	r1, r2, #4
 8002514:	6019      	str	r1, [r3, #0]
 8002516:	d0d7      	beq.n	80024c8 <_printf_i+0x50>
 8002518:	f9b2 3000 	ldrsh.w	r3, [r2]
 800251c:	2b00      	cmp	r3, #0
 800251e:	da03      	bge.n	8002528 <_printf_i+0xb0>
 8002520:	222d      	movs	r2, #45	; 0x2d
 8002522:	425b      	negs	r3, r3
 8002524:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002528:	4962      	ldr	r1, [pc, #392]	; (80026b4 <_printf_i+0x23c>)
 800252a:	220a      	movs	r2, #10
 800252c:	e017      	b.n	800255e <_printf_i+0xe6>
 800252e:	6820      	ldr	r0, [r4, #0]
 8002530:	6819      	ldr	r1, [r3, #0]
 8002532:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002536:	d003      	beq.n	8002540 <_printf_i+0xc8>
 8002538:	1d08      	adds	r0, r1, #4
 800253a:	6018      	str	r0, [r3, #0]
 800253c:	680b      	ldr	r3, [r1, #0]
 800253e:	e006      	b.n	800254e <_printf_i+0xd6>
 8002540:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002544:	f101 0004 	add.w	r0, r1, #4
 8002548:	6018      	str	r0, [r3, #0]
 800254a:	d0f7      	beq.n	800253c <_printf_i+0xc4>
 800254c:	880b      	ldrh	r3, [r1, #0]
 800254e:	4959      	ldr	r1, [pc, #356]	; (80026b4 <_printf_i+0x23c>)
 8002550:	2a6f      	cmp	r2, #111	; 0x6f
 8002552:	bf14      	ite	ne
 8002554:	220a      	movne	r2, #10
 8002556:	2208      	moveq	r2, #8
 8002558:	2000      	movs	r0, #0
 800255a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800255e:	6865      	ldr	r5, [r4, #4]
 8002560:	60a5      	str	r5, [r4, #8]
 8002562:	2d00      	cmp	r5, #0
 8002564:	f2c0 809c 	blt.w	80026a0 <_printf_i+0x228>
 8002568:	6820      	ldr	r0, [r4, #0]
 800256a:	f020 0004 	bic.w	r0, r0, #4
 800256e:	6020      	str	r0, [r4, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d13f      	bne.n	80025f4 <_printf_i+0x17c>
 8002574:	2d00      	cmp	r5, #0
 8002576:	f040 8095 	bne.w	80026a4 <_printf_i+0x22c>
 800257a:	4675      	mov	r5, lr
 800257c:	2a08      	cmp	r2, #8
 800257e:	d10b      	bne.n	8002598 <_printf_i+0x120>
 8002580:	6823      	ldr	r3, [r4, #0]
 8002582:	07da      	lsls	r2, r3, #31
 8002584:	d508      	bpl.n	8002598 <_printf_i+0x120>
 8002586:	6923      	ldr	r3, [r4, #16]
 8002588:	6862      	ldr	r2, [r4, #4]
 800258a:	429a      	cmp	r2, r3
 800258c:	bfde      	ittt	le
 800258e:	2330      	movle	r3, #48	; 0x30
 8002590:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002594:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002598:	ebae 0305 	sub.w	r3, lr, r5
 800259c:	6123      	str	r3, [r4, #16]
 800259e:	f8cd 8000 	str.w	r8, [sp]
 80025a2:	463b      	mov	r3, r7
 80025a4:	aa03      	add	r2, sp, #12
 80025a6:	4621      	mov	r1, r4
 80025a8:	4630      	mov	r0, r6
 80025aa:	f7ff feef 	bl	800238c <_printf_common>
 80025ae:	3001      	adds	r0, #1
 80025b0:	d155      	bne.n	800265e <_printf_i+0x1e6>
 80025b2:	f04f 30ff 	mov.w	r0, #4294967295
 80025b6:	b005      	add	sp, #20
 80025b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80025bc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80025c0:	493c      	ldr	r1, [pc, #240]	; (80026b4 <_printf_i+0x23c>)
 80025c2:	6822      	ldr	r2, [r4, #0]
 80025c4:	6818      	ldr	r0, [r3, #0]
 80025c6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80025ca:	f100 0504 	add.w	r5, r0, #4
 80025ce:	601d      	str	r5, [r3, #0]
 80025d0:	d001      	beq.n	80025d6 <_printf_i+0x15e>
 80025d2:	6803      	ldr	r3, [r0, #0]
 80025d4:	e002      	b.n	80025dc <_printf_i+0x164>
 80025d6:	0655      	lsls	r5, r2, #25
 80025d8:	d5fb      	bpl.n	80025d2 <_printf_i+0x15a>
 80025da:	8803      	ldrh	r3, [r0, #0]
 80025dc:	07d0      	lsls	r0, r2, #31
 80025de:	bf44      	itt	mi
 80025e0:	f042 0220 	orrmi.w	r2, r2, #32
 80025e4:	6022      	strmi	r2, [r4, #0]
 80025e6:	b91b      	cbnz	r3, 80025f0 <_printf_i+0x178>
 80025e8:	6822      	ldr	r2, [r4, #0]
 80025ea:	f022 0220 	bic.w	r2, r2, #32
 80025ee:	6022      	str	r2, [r4, #0]
 80025f0:	2210      	movs	r2, #16
 80025f2:	e7b1      	b.n	8002558 <_printf_i+0xe0>
 80025f4:	4675      	mov	r5, lr
 80025f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80025fa:	fb02 3310 	mls	r3, r2, r0, r3
 80025fe:	5ccb      	ldrb	r3, [r1, r3]
 8002600:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002604:	4603      	mov	r3, r0
 8002606:	2800      	cmp	r0, #0
 8002608:	d1f5      	bne.n	80025f6 <_printf_i+0x17e>
 800260a:	e7b7      	b.n	800257c <_printf_i+0x104>
 800260c:	6808      	ldr	r0, [r1, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	6949      	ldr	r1, [r1, #20]
 8002612:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002616:	d004      	beq.n	8002622 <_printf_i+0x1aa>
 8002618:	1d10      	adds	r0, r2, #4
 800261a:	6018      	str	r0, [r3, #0]
 800261c:	6813      	ldr	r3, [r2, #0]
 800261e:	6019      	str	r1, [r3, #0]
 8002620:	e007      	b.n	8002632 <_printf_i+0x1ba>
 8002622:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002626:	f102 0004 	add.w	r0, r2, #4
 800262a:	6018      	str	r0, [r3, #0]
 800262c:	6813      	ldr	r3, [r2, #0]
 800262e:	d0f6      	beq.n	800261e <_printf_i+0x1a6>
 8002630:	8019      	strh	r1, [r3, #0]
 8002632:	2300      	movs	r3, #0
 8002634:	6123      	str	r3, [r4, #16]
 8002636:	4675      	mov	r5, lr
 8002638:	e7b1      	b.n	800259e <_printf_i+0x126>
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	1d11      	adds	r1, r2, #4
 800263e:	6019      	str	r1, [r3, #0]
 8002640:	6815      	ldr	r5, [r2, #0]
 8002642:	6862      	ldr	r2, [r4, #4]
 8002644:	2100      	movs	r1, #0
 8002646:	4628      	mov	r0, r5
 8002648:	f7fd fde2 	bl	8000210 <memchr>
 800264c:	b108      	cbz	r0, 8002652 <_printf_i+0x1da>
 800264e:	1b40      	subs	r0, r0, r5
 8002650:	6060      	str	r0, [r4, #4]
 8002652:	6863      	ldr	r3, [r4, #4]
 8002654:	6123      	str	r3, [r4, #16]
 8002656:	2300      	movs	r3, #0
 8002658:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800265c:	e79f      	b.n	800259e <_printf_i+0x126>
 800265e:	6923      	ldr	r3, [r4, #16]
 8002660:	462a      	mov	r2, r5
 8002662:	4639      	mov	r1, r7
 8002664:	4630      	mov	r0, r6
 8002666:	47c0      	blx	r8
 8002668:	3001      	adds	r0, #1
 800266a:	d0a2      	beq.n	80025b2 <_printf_i+0x13a>
 800266c:	6823      	ldr	r3, [r4, #0]
 800266e:	079b      	lsls	r3, r3, #30
 8002670:	d507      	bpl.n	8002682 <_printf_i+0x20a>
 8002672:	2500      	movs	r5, #0
 8002674:	f104 0919 	add.w	r9, r4, #25
 8002678:	68e3      	ldr	r3, [r4, #12]
 800267a:	9a03      	ldr	r2, [sp, #12]
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	429d      	cmp	r5, r3
 8002680:	db05      	blt.n	800268e <_printf_i+0x216>
 8002682:	68e0      	ldr	r0, [r4, #12]
 8002684:	9b03      	ldr	r3, [sp, #12]
 8002686:	4298      	cmp	r0, r3
 8002688:	bfb8      	it	lt
 800268a:	4618      	movlt	r0, r3
 800268c:	e793      	b.n	80025b6 <_printf_i+0x13e>
 800268e:	2301      	movs	r3, #1
 8002690:	464a      	mov	r2, r9
 8002692:	4639      	mov	r1, r7
 8002694:	4630      	mov	r0, r6
 8002696:	47c0      	blx	r8
 8002698:	3001      	adds	r0, #1
 800269a:	d08a      	beq.n	80025b2 <_printf_i+0x13a>
 800269c:	3501      	adds	r5, #1
 800269e:	e7eb      	b.n	8002678 <_printf_i+0x200>
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1a7      	bne.n	80025f4 <_printf_i+0x17c>
 80026a4:	780b      	ldrb	r3, [r1, #0]
 80026a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80026aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026ae:	e765      	b.n	800257c <_printf_i+0x104>
 80026b0:	08002d4e 	.word	0x08002d4e
 80026b4:	08002d3d 	.word	0x08002d3d

080026b8 <_sbrk_r>:
 80026b8:	b538      	push	{r3, r4, r5, lr}
 80026ba:	4c06      	ldr	r4, [pc, #24]	; (80026d4 <_sbrk_r+0x1c>)
 80026bc:	2300      	movs	r3, #0
 80026be:	4605      	mov	r5, r0
 80026c0:	4608      	mov	r0, r1
 80026c2:	6023      	str	r3, [r4, #0]
 80026c4:	f7ff fb3a 	bl	8001d3c <_sbrk>
 80026c8:	1c43      	adds	r3, r0, #1
 80026ca:	d102      	bne.n	80026d2 <_sbrk_r+0x1a>
 80026cc:	6823      	ldr	r3, [r4, #0]
 80026ce:	b103      	cbz	r3, 80026d2 <_sbrk_r+0x1a>
 80026d0:	602b      	str	r3, [r5, #0]
 80026d2:	bd38      	pop	{r3, r4, r5, pc}
 80026d4:	2000018c 	.word	0x2000018c

080026d8 <__sread>:
 80026d8:	b510      	push	{r4, lr}
 80026da:	460c      	mov	r4, r1
 80026dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026e0:	f000 fa98 	bl	8002c14 <_read_r>
 80026e4:	2800      	cmp	r0, #0
 80026e6:	bfab      	itete	ge
 80026e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80026ea:	89a3      	ldrhlt	r3, [r4, #12]
 80026ec:	181b      	addge	r3, r3, r0
 80026ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80026f2:	bfac      	ite	ge
 80026f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80026f6:	81a3      	strhlt	r3, [r4, #12]
 80026f8:	bd10      	pop	{r4, pc}

080026fa <__swrite>:
 80026fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026fe:	461f      	mov	r7, r3
 8002700:	898b      	ldrh	r3, [r1, #12]
 8002702:	05db      	lsls	r3, r3, #23
 8002704:	4605      	mov	r5, r0
 8002706:	460c      	mov	r4, r1
 8002708:	4616      	mov	r6, r2
 800270a:	d505      	bpl.n	8002718 <__swrite+0x1e>
 800270c:	2302      	movs	r3, #2
 800270e:	2200      	movs	r2, #0
 8002710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002714:	f000 f9b8 	bl	8002a88 <_lseek_r>
 8002718:	89a3      	ldrh	r3, [r4, #12]
 800271a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800271e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002722:	81a3      	strh	r3, [r4, #12]
 8002724:	4632      	mov	r2, r6
 8002726:	463b      	mov	r3, r7
 8002728:	4628      	mov	r0, r5
 800272a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800272e:	f000 b869 	b.w	8002804 <_write_r>

08002732 <__sseek>:
 8002732:	b510      	push	{r4, lr}
 8002734:	460c      	mov	r4, r1
 8002736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800273a:	f000 f9a5 	bl	8002a88 <_lseek_r>
 800273e:	1c43      	adds	r3, r0, #1
 8002740:	89a3      	ldrh	r3, [r4, #12]
 8002742:	bf15      	itete	ne
 8002744:	6560      	strne	r0, [r4, #84]	; 0x54
 8002746:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800274a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800274e:	81a3      	strheq	r3, [r4, #12]
 8002750:	bf18      	it	ne
 8002752:	81a3      	strhne	r3, [r4, #12]
 8002754:	bd10      	pop	{r4, pc}

08002756 <__sclose>:
 8002756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800275a:	f000 b8d3 	b.w	8002904 <_close_r>
	...

08002760 <__swbuf_r>:
 8002760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002762:	460e      	mov	r6, r1
 8002764:	4614      	mov	r4, r2
 8002766:	4605      	mov	r5, r0
 8002768:	b118      	cbz	r0, 8002772 <__swbuf_r+0x12>
 800276a:	6983      	ldr	r3, [r0, #24]
 800276c:	b90b      	cbnz	r3, 8002772 <__swbuf_r+0x12>
 800276e:	f7ff fbe5 	bl	8001f3c <__sinit>
 8002772:	4b21      	ldr	r3, [pc, #132]	; (80027f8 <__swbuf_r+0x98>)
 8002774:	429c      	cmp	r4, r3
 8002776:	d12a      	bne.n	80027ce <__swbuf_r+0x6e>
 8002778:	686c      	ldr	r4, [r5, #4]
 800277a:	69a3      	ldr	r3, [r4, #24]
 800277c:	60a3      	str	r3, [r4, #8]
 800277e:	89a3      	ldrh	r3, [r4, #12]
 8002780:	071a      	lsls	r2, r3, #28
 8002782:	d52e      	bpl.n	80027e2 <__swbuf_r+0x82>
 8002784:	6923      	ldr	r3, [r4, #16]
 8002786:	b363      	cbz	r3, 80027e2 <__swbuf_r+0x82>
 8002788:	6923      	ldr	r3, [r4, #16]
 800278a:	6820      	ldr	r0, [r4, #0]
 800278c:	1ac0      	subs	r0, r0, r3
 800278e:	6963      	ldr	r3, [r4, #20]
 8002790:	b2f6      	uxtb	r6, r6
 8002792:	4298      	cmp	r0, r3
 8002794:	4637      	mov	r7, r6
 8002796:	db04      	blt.n	80027a2 <__swbuf_r+0x42>
 8002798:	4621      	mov	r1, r4
 800279a:	4628      	mov	r0, r5
 800279c:	f000 f94a 	bl	8002a34 <_fflush_r>
 80027a0:	bb28      	cbnz	r0, 80027ee <__swbuf_r+0x8e>
 80027a2:	68a3      	ldr	r3, [r4, #8]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	60a3      	str	r3, [r4, #8]
 80027a8:	6823      	ldr	r3, [r4, #0]
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	6022      	str	r2, [r4, #0]
 80027ae:	701e      	strb	r6, [r3, #0]
 80027b0:	6963      	ldr	r3, [r4, #20]
 80027b2:	3001      	adds	r0, #1
 80027b4:	4298      	cmp	r0, r3
 80027b6:	d004      	beq.n	80027c2 <__swbuf_r+0x62>
 80027b8:	89a3      	ldrh	r3, [r4, #12]
 80027ba:	07db      	lsls	r3, r3, #31
 80027bc:	d519      	bpl.n	80027f2 <__swbuf_r+0x92>
 80027be:	2e0a      	cmp	r6, #10
 80027c0:	d117      	bne.n	80027f2 <__swbuf_r+0x92>
 80027c2:	4621      	mov	r1, r4
 80027c4:	4628      	mov	r0, r5
 80027c6:	f000 f935 	bl	8002a34 <_fflush_r>
 80027ca:	b190      	cbz	r0, 80027f2 <__swbuf_r+0x92>
 80027cc:	e00f      	b.n	80027ee <__swbuf_r+0x8e>
 80027ce:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <__swbuf_r+0x9c>)
 80027d0:	429c      	cmp	r4, r3
 80027d2:	d101      	bne.n	80027d8 <__swbuf_r+0x78>
 80027d4:	68ac      	ldr	r4, [r5, #8]
 80027d6:	e7d0      	b.n	800277a <__swbuf_r+0x1a>
 80027d8:	4b09      	ldr	r3, [pc, #36]	; (8002800 <__swbuf_r+0xa0>)
 80027da:	429c      	cmp	r4, r3
 80027dc:	bf08      	it	eq
 80027de:	68ec      	ldreq	r4, [r5, #12]
 80027e0:	e7cb      	b.n	800277a <__swbuf_r+0x1a>
 80027e2:	4621      	mov	r1, r4
 80027e4:	4628      	mov	r0, r5
 80027e6:	f000 f81f 	bl	8002828 <__swsetup_r>
 80027ea:	2800      	cmp	r0, #0
 80027ec:	d0cc      	beq.n	8002788 <__swbuf_r+0x28>
 80027ee:	f04f 37ff 	mov.w	r7, #4294967295
 80027f2:	4638      	mov	r0, r7
 80027f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027f6:	bf00      	nop
 80027f8:	08002cec 	.word	0x08002cec
 80027fc:	08002d0c 	.word	0x08002d0c
 8002800:	08002ccc 	.word	0x08002ccc

08002804 <_write_r>:
 8002804:	b538      	push	{r3, r4, r5, lr}
 8002806:	4c07      	ldr	r4, [pc, #28]	; (8002824 <_write_r+0x20>)
 8002808:	4605      	mov	r5, r0
 800280a:	4608      	mov	r0, r1
 800280c:	4611      	mov	r1, r2
 800280e:	2200      	movs	r2, #0
 8002810:	6022      	str	r2, [r4, #0]
 8002812:	461a      	mov	r2, r3
 8002814:	f7ff f85c 	bl	80018d0 <_write>
 8002818:	1c43      	adds	r3, r0, #1
 800281a:	d102      	bne.n	8002822 <_write_r+0x1e>
 800281c:	6823      	ldr	r3, [r4, #0]
 800281e:	b103      	cbz	r3, 8002822 <_write_r+0x1e>
 8002820:	602b      	str	r3, [r5, #0]
 8002822:	bd38      	pop	{r3, r4, r5, pc}
 8002824:	2000018c 	.word	0x2000018c

08002828 <__swsetup_r>:
 8002828:	4b32      	ldr	r3, [pc, #200]	; (80028f4 <__swsetup_r+0xcc>)
 800282a:	b570      	push	{r4, r5, r6, lr}
 800282c:	681d      	ldr	r5, [r3, #0]
 800282e:	4606      	mov	r6, r0
 8002830:	460c      	mov	r4, r1
 8002832:	b125      	cbz	r5, 800283e <__swsetup_r+0x16>
 8002834:	69ab      	ldr	r3, [r5, #24]
 8002836:	b913      	cbnz	r3, 800283e <__swsetup_r+0x16>
 8002838:	4628      	mov	r0, r5
 800283a:	f7ff fb7f 	bl	8001f3c <__sinit>
 800283e:	4b2e      	ldr	r3, [pc, #184]	; (80028f8 <__swsetup_r+0xd0>)
 8002840:	429c      	cmp	r4, r3
 8002842:	d10f      	bne.n	8002864 <__swsetup_r+0x3c>
 8002844:	686c      	ldr	r4, [r5, #4]
 8002846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800284a:	b29a      	uxth	r2, r3
 800284c:	0715      	lsls	r5, r2, #28
 800284e:	d42c      	bmi.n	80028aa <__swsetup_r+0x82>
 8002850:	06d0      	lsls	r0, r2, #27
 8002852:	d411      	bmi.n	8002878 <__swsetup_r+0x50>
 8002854:	2209      	movs	r2, #9
 8002856:	6032      	str	r2, [r6, #0]
 8002858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800285c:	81a3      	strh	r3, [r4, #12]
 800285e:	f04f 30ff 	mov.w	r0, #4294967295
 8002862:	bd70      	pop	{r4, r5, r6, pc}
 8002864:	4b25      	ldr	r3, [pc, #148]	; (80028fc <__swsetup_r+0xd4>)
 8002866:	429c      	cmp	r4, r3
 8002868:	d101      	bne.n	800286e <__swsetup_r+0x46>
 800286a:	68ac      	ldr	r4, [r5, #8]
 800286c:	e7eb      	b.n	8002846 <__swsetup_r+0x1e>
 800286e:	4b24      	ldr	r3, [pc, #144]	; (8002900 <__swsetup_r+0xd8>)
 8002870:	429c      	cmp	r4, r3
 8002872:	bf08      	it	eq
 8002874:	68ec      	ldreq	r4, [r5, #12]
 8002876:	e7e6      	b.n	8002846 <__swsetup_r+0x1e>
 8002878:	0751      	lsls	r1, r2, #29
 800287a:	d512      	bpl.n	80028a2 <__swsetup_r+0x7a>
 800287c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800287e:	b141      	cbz	r1, 8002892 <__swsetup_r+0x6a>
 8002880:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002884:	4299      	cmp	r1, r3
 8002886:	d002      	beq.n	800288e <__swsetup_r+0x66>
 8002888:	4630      	mov	r0, r6
 800288a:	f000 f975 	bl	8002b78 <_free_r>
 800288e:	2300      	movs	r3, #0
 8002890:	6363      	str	r3, [r4, #52]	; 0x34
 8002892:	89a3      	ldrh	r3, [r4, #12]
 8002894:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002898:	81a3      	strh	r3, [r4, #12]
 800289a:	2300      	movs	r3, #0
 800289c:	6063      	str	r3, [r4, #4]
 800289e:	6923      	ldr	r3, [r4, #16]
 80028a0:	6023      	str	r3, [r4, #0]
 80028a2:	89a3      	ldrh	r3, [r4, #12]
 80028a4:	f043 0308 	orr.w	r3, r3, #8
 80028a8:	81a3      	strh	r3, [r4, #12]
 80028aa:	6923      	ldr	r3, [r4, #16]
 80028ac:	b94b      	cbnz	r3, 80028c2 <__swsetup_r+0x9a>
 80028ae:	89a3      	ldrh	r3, [r4, #12]
 80028b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80028b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028b8:	d003      	beq.n	80028c2 <__swsetup_r+0x9a>
 80028ba:	4621      	mov	r1, r4
 80028bc:	4630      	mov	r0, r6
 80028be:	f000 f919 	bl	8002af4 <__smakebuf_r>
 80028c2:	89a2      	ldrh	r2, [r4, #12]
 80028c4:	f012 0301 	ands.w	r3, r2, #1
 80028c8:	d00c      	beq.n	80028e4 <__swsetup_r+0xbc>
 80028ca:	2300      	movs	r3, #0
 80028cc:	60a3      	str	r3, [r4, #8]
 80028ce:	6963      	ldr	r3, [r4, #20]
 80028d0:	425b      	negs	r3, r3
 80028d2:	61a3      	str	r3, [r4, #24]
 80028d4:	6923      	ldr	r3, [r4, #16]
 80028d6:	b953      	cbnz	r3, 80028ee <__swsetup_r+0xc6>
 80028d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028dc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80028e0:	d1ba      	bne.n	8002858 <__swsetup_r+0x30>
 80028e2:	bd70      	pop	{r4, r5, r6, pc}
 80028e4:	0792      	lsls	r2, r2, #30
 80028e6:	bf58      	it	pl
 80028e8:	6963      	ldrpl	r3, [r4, #20]
 80028ea:	60a3      	str	r3, [r4, #8]
 80028ec:	e7f2      	b.n	80028d4 <__swsetup_r+0xac>
 80028ee:	2000      	movs	r0, #0
 80028f0:	e7f7      	b.n	80028e2 <__swsetup_r+0xba>
 80028f2:	bf00      	nop
 80028f4:	2000000c 	.word	0x2000000c
 80028f8:	08002cec 	.word	0x08002cec
 80028fc:	08002d0c 	.word	0x08002d0c
 8002900:	08002ccc 	.word	0x08002ccc

08002904 <_close_r>:
 8002904:	b538      	push	{r3, r4, r5, lr}
 8002906:	4c06      	ldr	r4, [pc, #24]	; (8002920 <_close_r+0x1c>)
 8002908:	2300      	movs	r3, #0
 800290a:	4605      	mov	r5, r0
 800290c:	4608      	mov	r0, r1
 800290e:	6023      	str	r3, [r4, #0]
 8002910:	f7ff fa2e 	bl	8001d70 <_close>
 8002914:	1c43      	adds	r3, r0, #1
 8002916:	d102      	bne.n	800291e <_close_r+0x1a>
 8002918:	6823      	ldr	r3, [r4, #0]
 800291a:	b103      	cbz	r3, 800291e <_close_r+0x1a>
 800291c:	602b      	str	r3, [r5, #0]
 800291e:	bd38      	pop	{r3, r4, r5, pc}
 8002920:	2000018c 	.word	0x2000018c

08002924 <__sflush_r>:
 8002924:	898a      	ldrh	r2, [r1, #12]
 8002926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800292a:	4605      	mov	r5, r0
 800292c:	0710      	lsls	r0, r2, #28
 800292e:	460c      	mov	r4, r1
 8002930:	d45a      	bmi.n	80029e8 <__sflush_r+0xc4>
 8002932:	684b      	ldr	r3, [r1, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	dc05      	bgt.n	8002944 <__sflush_r+0x20>
 8002938:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800293a:	2b00      	cmp	r3, #0
 800293c:	dc02      	bgt.n	8002944 <__sflush_r+0x20>
 800293e:	2000      	movs	r0, #0
 8002940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002944:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002946:	2e00      	cmp	r6, #0
 8002948:	d0f9      	beq.n	800293e <__sflush_r+0x1a>
 800294a:	2300      	movs	r3, #0
 800294c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002950:	682f      	ldr	r7, [r5, #0]
 8002952:	602b      	str	r3, [r5, #0]
 8002954:	d033      	beq.n	80029be <__sflush_r+0x9a>
 8002956:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002958:	89a3      	ldrh	r3, [r4, #12]
 800295a:	075a      	lsls	r2, r3, #29
 800295c:	d505      	bpl.n	800296a <__sflush_r+0x46>
 800295e:	6863      	ldr	r3, [r4, #4]
 8002960:	1ac0      	subs	r0, r0, r3
 8002962:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002964:	b10b      	cbz	r3, 800296a <__sflush_r+0x46>
 8002966:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002968:	1ac0      	subs	r0, r0, r3
 800296a:	2300      	movs	r3, #0
 800296c:	4602      	mov	r2, r0
 800296e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002970:	6a21      	ldr	r1, [r4, #32]
 8002972:	4628      	mov	r0, r5
 8002974:	47b0      	blx	r6
 8002976:	1c43      	adds	r3, r0, #1
 8002978:	89a3      	ldrh	r3, [r4, #12]
 800297a:	d106      	bne.n	800298a <__sflush_r+0x66>
 800297c:	6829      	ldr	r1, [r5, #0]
 800297e:	291d      	cmp	r1, #29
 8002980:	d84b      	bhi.n	8002a1a <__sflush_r+0xf6>
 8002982:	4a2b      	ldr	r2, [pc, #172]	; (8002a30 <__sflush_r+0x10c>)
 8002984:	40ca      	lsrs	r2, r1
 8002986:	07d6      	lsls	r6, r2, #31
 8002988:	d547      	bpl.n	8002a1a <__sflush_r+0xf6>
 800298a:	2200      	movs	r2, #0
 800298c:	6062      	str	r2, [r4, #4]
 800298e:	04d9      	lsls	r1, r3, #19
 8002990:	6922      	ldr	r2, [r4, #16]
 8002992:	6022      	str	r2, [r4, #0]
 8002994:	d504      	bpl.n	80029a0 <__sflush_r+0x7c>
 8002996:	1c42      	adds	r2, r0, #1
 8002998:	d101      	bne.n	800299e <__sflush_r+0x7a>
 800299a:	682b      	ldr	r3, [r5, #0]
 800299c:	b903      	cbnz	r3, 80029a0 <__sflush_r+0x7c>
 800299e:	6560      	str	r0, [r4, #84]	; 0x54
 80029a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80029a2:	602f      	str	r7, [r5, #0]
 80029a4:	2900      	cmp	r1, #0
 80029a6:	d0ca      	beq.n	800293e <__sflush_r+0x1a>
 80029a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80029ac:	4299      	cmp	r1, r3
 80029ae:	d002      	beq.n	80029b6 <__sflush_r+0x92>
 80029b0:	4628      	mov	r0, r5
 80029b2:	f000 f8e1 	bl	8002b78 <_free_r>
 80029b6:	2000      	movs	r0, #0
 80029b8:	6360      	str	r0, [r4, #52]	; 0x34
 80029ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029be:	6a21      	ldr	r1, [r4, #32]
 80029c0:	2301      	movs	r3, #1
 80029c2:	4628      	mov	r0, r5
 80029c4:	47b0      	blx	r6
 80029c6:	1c41      	adds	r1, r0, #1
 80029c8:	d1c6      	bne.n	8002958 <__sflush_r+0x34>
 80029ca:	682b      	ldr	r3, [r5, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0c3      	beq.n	8002958 <__sflush_r+0x34>
 80029d0:	2b1d      	cmp	r3, #29
 80029d2:	d001      	beq.n	80029d8 <__sflush_r+0xb4>
 80029d4:	2b16      	cmp	r3, #22
 80029d6:	d101      	bne.n	80029dc <__sflush_r+0xb8>
 80029d8:	602f      	str	r7, [r5, #0]
 80029da:	e7b0      	b.n	800293e <__sflush_r+0x1a>
 80029dc:	89a3      	ldrh	r3, [r4, #12]
 80029de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029e2:	81a3      	strh	r3, [r4, #12]
 80029e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029e8:	690f      	ldr	r7, [r1, #16]
 80029ea:	2f00      	cmp	r7, #0
 80029ec:	d0a7      	beq.n	800293e <__sflush_r+0x1a>
 80029ee:	0793      	lsls	r3, r2, #30
 80029f0:	680e      	ldr	r6, [r1, #0]
 80029f2:	bf08      	it	eq
 80029f4:	694b      	ldreq	r3, [r1, #20]
 80029f6:	600f      	str	r7, [r1, #0]
 80029f8:	bf18      	it	ne
 80029fa:	2300      	movne	r3, #0
 80029fc:	eba6 0807 	sub.w	r8, r6, r7
 8002a00:	608b      	str	r3, [r1, #8]
 8002a02:	f1b8 0f00 	cmp.w	r8, #0
 8002a06:	dd9a      	ble.n	800293e <__sflush_r+0x1a>
 8002a08:	4643      	mov	r3, r8
 8002a0a:	463a      	mov	r2, r7
 8002a0c:	6a21      	ldr	r1, [r4, #32]
 8002a0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002a10:	4628      	mov	r0, r5
 8002a12:	47b0      	blx	r6
 8002a14:	2800      	cmp	r0, #0
 8002a16:	dc07      	bgt.n	8002a28 <__sflush_r+0x104>
 8002a18:	89a3      	ldrh	r3, [r4, #12]
 8002a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a1e:	81a3      	strh	r3, [r4, #12]
 8002a20:	f04f 30ff 	mov.w	r0, #4294967295
 8002a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a28:	4407      	add	r7, r0
 8002a2a:	eba8 0800 	sub.w	r8, r8, r0
 8002a2e:	e7e8      	b.n	8002a02 <__sflush_r+0xde>
 8002a30:	20400001 	.word	0x20400001

08002a34 <_fflush_r>:
 8002a34:	b538      	push	{r3, r4, r5, lr}
 8002a36:	690b      	ldr	r3, [r1, #16]
 8002a38:	4605      	mov	r5, r0
 8002a3a:	460c      	mov	r4, r1
 8002a3c:	b1db      	cbz	r3, 8002a76 <_fflush_r+0x42>
 8002a3e:	b118      	cbz	r0, 8002a48 <_fflush_r+0x14>
 8002a40:	6983      	ldr	r3, [r0, #24]
 8002a42:	b90b      	cbnz	r3, 8002a48 <_fflush_r+0x14>
 8002a44:	f7ff fa7a 	bl	8001f3c <__sinit>
 8002a48:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <_fflush_r+0x48>)
 8002a4a:	429c      	cmp	r4, r3
 8002a4c:	d109      	bne.n	8002a62 <_fflush_r+0x2e>
 8002a4e:	686c      	ldr	r4, [r5, #4]
 8002a50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a54:	b17b      	cbz	r3, 8002a76 <_fflush_r+0x42>
 8002a56:	4621      	mov	r1, r4
 8002a58:	4628      	mov	r0, r5
 8002a5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a5e:	f7ff bf61 	b.w	8002924 <__sflush_r>
 8002a62:	4b07      	ldr	r3, [pc, #28]	; (8002a80 <_fflush_r+0x4c>)
 8002a64:	429c      	cmp	r4, r3
 8002a66:	d101      	bne.n	8002a6c <_fflush_r+0x38>
 8002a68:	68ac      	ldr	r4, [r5, #8]
 8002a6a:	e7f1      	b.n	8002a50 <_fflush_r+0x1c>
 8002a6c:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <_fflush_r+0x50>)
 8002a6e:	429c      	cmp	r4, r3
 8002a70:	bf08      	it	eq
 8002a72:	68ec      	ldreq	r4, [r5, #12]
 8002a74:	e7ec      	b.n	8002a50 <_fflush_r+0x1c>
 8002a76:	2000      	movs	r0, #0
 8002a78:	bd38      	pop	{r3, r4, r5, pc}
 8002a7a:	bf00      	nop
 8002a7c:	08002cec 	.word	0x08002cec
 8002a80:	08002d0c 	.word	0x08002d0c
 8002a84:	08002ccc 	.word	0x08002ccc

08002a88 <_lseek_r>:
 8002a88:	b538      	push	{r3, r4, r5, lr}
 8002a8a:	4c07      	ldr	r4, [pc, #28]	; (8002aa8 <_lseek_r+0x20>)
 8002a8c:	4605      	mov	r5, r0
 8002a8e:	4608      	mov	r0, r1
 8002a90:	4611      	mov	r1, r2
 8002a92:	2200      	movs	r2, #0
 8002a94:	6022      	str	r2, [r4, #0]
 8002a96:	461a      	mov	r2, r3
 8002a98:	f7ff f974 	bl	8001d84 <_lseek>
 8002a9c:	1c43      	adds	r3, r0, #1
 8002a9e:	d102      	bne.n	8002aa6 <_lseek_r+0x1e>
 8002aa0:	6823      	ldr	r3, [r4, #0]
 8002aa2:	b103      	cbz	r3, 8002aa6 <_lseek_r+0x1e>
 8002aa4:	602b      	str	r3, [r5, #0]
 8002aa6:	bd38      	pop	{r3, r4, r5, pc}
 8002aa8:	2000018c 	.word	0x2000018c

08002aac <__swhatbuf_r>:
 8002aac:	b570      	push	{r4, r5, r6, lr}
 8002aae:	460e      	mov	r6, r1
 8002ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ab4:	2900      	cmp	r1, #0
 8002ab6:	b090      	sub	sp, #64	; 0x40
 8002ab8:	4614      	mov	r4, r2
 8002aba:	461d      	mov	r5, r3
 8002abc:	da07      	bge.n	8002ace <__swhatbuf_r+0x22>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	602b      	str	r3, [r5, #0]
 8002ac2:	89b3      	ldrh	r3, [r6, #12]
 8002ac4:	061a      	lsls	r2, r3, #24
 8002ac6:	d410      	bmi.n	8002aea <__swhatbuf_r+0x3e>
 8002ac8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002acc:	e00e      	b.n	8002aec <__swhatbuf_r+0x40>
 8002ace:	aa01      	add	r2, sp, #4
 8002ad0:	f000 f8b2 	bl	8002c38 <_fstat_r>
 8002ad4:	2800      	cmp	r0, #0
 8002ad6:	dbf2      	blt.n	8002abe <__swhatbuf_r+0x12>
 8002ad8:	9a02      	ldr	r2, [sp, #8]
 8002ada:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002ade:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002ae2:	425a      	negs	r2, r3
 8002ae4:	415a      	adcs	r2, r3
 8002ae6:	602a      	str	r2, [r5, #0]
 8002ae8:	e7ee      	b.n	8002ac8 <__swhatbuf_r+0x1c>
 8002aea:	2340      	movs	r3, #64	; 0x40
 8002aec:	2000      	movs	r0, #0
 8002aee:	6023      	str	r3, [r4, #0]
 8002af0:	b010      	add	sp, #64	; 0x40
 8002af2:	bd70      	pop	{r4, r5, r6, pc}

08002af4 <__smakebuf_r>:
 8002af4:	898b      	ldrh	r3, [r1, #12]
 8002af6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002af8:	079d      	lsls	r5, r3, #30
 8002afa:	4606      	mov	r6, r0
 8002afc:	460c      	mov	r4, r1
 8002afe:	d507      	bpl.n	8002b10 <__smakebuf_r+0x1c>
 8002b00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002b04:	6023      	str	r3, [r4, #0]
 8002b06:	6123      	str	r3, [r4, #16]
 8002b08:	2301      	movs	r3, #1
 8002b0a:	6163      	str	r3, [r4, #20]
 8002b0c:	b002      	add	sp, #8
 8002b0e:	bd70      	pop	{r4, r5, r6, pc}
 8002b10:	ab01      	add	r3, sp, #4
 8002b12:	466a      	mov	r2, sp
 8002b14:	f7ff ffca 	bl	8002aac <__swhatbuf_r>
 8002b18:	9900      	ldr	r1, [sp, #0]
 8002b1a:	4605      	mov	r5, r0
 8002b1c:	4630      	mov	r0, r6
 8002b1e:	f7ff fa97 	bl	8002050 <_malloc_r>
 8002b22:	b948      	cbnz	r0, 8002b38 <__smakebuf_r+0x44>
 8002b24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b28:	059a      	lsls	r2, r3, #22
 8002b2a:	d4ef      	bmi.n	8002b0c <__smakebuf_r+0x18>
 8002b2c:	f023 0303 	bic.w	r3, r3, #3
 8002b30:	f043 0302 	orr.w	r3, r3, #2
 8002b34:	81a3      	strh	r3, [r4, #12]
 8002b36:	e7e3      	b.n	8002b00 <__smakebuf_r+0xc>
 8002b38:	4b0d      	ldr	r3, [pc, #52]	; (8002b70 <__smakebuf_r+0x7c>)
 8002b3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8002b3c:	89a3      	ldrh	r3, [r4, #12]
 8002b3e:	6020      	str	r0, [r4, #0]
 8002b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b44:	81a3      	strh	r3, [r4, #12]
 8002b46:	9b00      	ldr	r3, [sp, #0]
 8002b48:	6163      	str	r3, [r4, #20]
 8002b4a:	9b01      	ldr	r3, [sp, #4]
 8002b4c:	6120      	str	r0, [r4, #16]
 8002b4e:	b15b      	cbz	r3, 8002b68 <__smakebuf_r+0x74>
 8002b50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b54:	4630      	mov	r0, r6
 8002b56:	f000 f881 	bl	8002c5c <_isatty_r>
 8002b5a:	b128      	cbz	r0, 8002b68 <__smakebuf_r+0x74>
 8002b5c:	89a3      	ldrh	r3, [r4, #12]
 8002b5e:	f023 0303 	bic.w	r3, r3, #3
 8002b62:	f043 0301 	orr.w	r3, r3, #1
 8002b66:	81a3      	strh	r3, [r4, #12]
 8002b68:	89a3      	ldrh	r3, [r4, #12]
 8002b6a:	431d      	orrs	r5, r3
 8002b6c:	81a5      	strh	r5, [r4, #12]
 8002b6e:	e7cd      	b.n	8002b0c <__smakebuf_r+0x18>
 8002b70:	08001ebd 	.word	0x08001ebd

08002b74 <__malloc_lock>:
 8002b74:	4770      	bx	lr

08002b76 <__malloc_unlock>:
 8002b76:	4770      	bx	lr

08002b78 <_free_r>:
 8002b78:	b538      	push	{r3, r4, r5, lr}
 8002b7a:	4605      	mov	r5, r0
 8002b7c:	2900      	cmp	r1, #0
 8002b7e:	d045      	beq.n	8002c0c <_free_r+0x94>
 8002b80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b84:	1f0c      	subs	r4, r1, #4
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	bfb8      	it	lt
 8002b8a:	18e4      	addlt	r4, r4, r3
 8002b8c:	f7ff fff2 	bl	8002b74 <__malloc_lock>
 8002b90:	4a1f      	ldr	r2, [pc, #124]	; (8002c10 <_free_r+0x98>)
 8002b92:	6813      	ldr	r3, [r2, #0]
 8002b94:	4610      	mov	r0, r2
 8002b96:	b933      	cbnz	r3, 8002ba6 <_free_r+0x2e>
 8002b98:	6063      	str	r3, [r4, #4]
 8002b9a:	6014      	str	r4, [r2, #0]
 8002b9c:	4628      	mov	r0, r5
 8002b9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ba2:	f7ff bfe8 	b.w	8002b76 <__malloc_unlock>
 8002ba6:	42a3      	cmp	r3, r4
 8002ba8:	d90c      	bls.n	8002bc4 <_free_r+0x4c>
 8002baa:	6821      	ldr	r1, [r4, #0]
 8002bac:	1862      	adds	r2, r4, r1
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	bf04      	itt	eq
 8002bb2:	681a      	ldreq	r2, [r3, #0]
 8002bb4:	685b      	ldreq	r3, [r3, #4]
 8002bb6:	6063      	str	r3, [r4, #4]
 8002bb8:	bf04      	itt	eq
 8002bba:	1852      	addeq	r2, r2, r1
 8002bbc:	6022      	streq	r2, [r4, #0]
 8002bbe:	6004      	str	r4, [r0, #0]
 8002bc0:	e7ec      	b.n	8002b9c <_free_r+0x24>
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	b10a      	cbz	r2, 8002bcc <_free_r+0x54>
 8002bc8:	42a2      	cmp	r2, r4
 8002bca:	d9fa      	bls.n	8002bc2 <_free_r+0x4a>
 8002bcc:	6819      	ldr	r1, [r3, #0]
 8002bce:	1858      	adds	r0, r3, r1
 8002bd0:	42a0      	cmp	r0, r4
 8002bd2:	d10b      	bne.n	8002bec <_free_r+0x74>
 8002bd4:	6820      	ldr	r0, [r4, #0]
 8002bd6:	4401      	add	r1, r0
 8002bd8:	1858      	adds	r0, r3, r1
 8002bda:	4282      	cmp	r2, r0
 8002bdc:	6019      	str	r1, [r3, #0]
 8002bde:	d1dd      	bne.n	8002b9c <_free_r+0x24>
 8002be0:	6810      	ldr	r0, [r2, #0]
 8002be2:	6852      	ldr	r2, [r2, #4]
 8002be4:	605a      	str	r2, [r3, #4]
 8002be6:	4401      	add	r1, r0
 8002be8:	6019      	str	r1, [r3, #0]
 8002bea:	e7d7      	b.n	8002b9c <_free_r+0x24>
 8002bec:	d902      	bls.n	8002bf4 <_free_r+0x7c>
 8002bee:	230c      	movs	r3, #12
 8002bf0:	602b      	str	r3, [r5, #0]
 8002bf2:	e7d3      	b.n	8002b9c <_free_r+0x24>
 8002bf4:	6820      	ldr	r0, [r4, #0]
 8002bf6:	1821      	adds	r1, r4, r0
 8002bf8:	428a      	cmp	r2, r1
 8002bfa:	bf04      	itt	eq
 8002bfc:	6811      	ldreq	r1, [r2, #0]
 8002bfe:	6852      	ldreq	r2, [r2, #4]
 8002c00:	6062      	str	r2, [r4, #4]
 8002c02:	bf04      	itt	eq
 8002c04:	1809      	addeq	r1, r1, r0
 8002c06:	6021      	streq	r1, [r4, #0]
 8002c08:	605c      	str	r4, [r3, #4]
 8002c0a:	e7c7      	b.n	8002b9c <_free_r+0x24>
 8002c0c:	bd38      	pop	{r3, r4, r5, pc}
 8002c0e:	bf00      	nop
 8002c10:	20000090 	.word	0x20000090

08002c14 <_read_r>:
 8002c14:	b538      	push	{r3, r4, r5, lr}
 8002c16:	4c07      	ldr	r4, [pc, #28]	; (8002c34 <_read_r+0x20>)
 8002c18:	4605      	mov	r5, r0
 8002c1a:	4608      	mov	r0, r1
 8002c1c:	4611      	mov	r1, r2
 8002c1e:	2200      	movs	r2, #0
 8002c20:	6022      	str	r2, [r4, #0]
 8002c22:	461a      	mov	r2, r3
 8002c24:	f7ff f87c 	bl	8001d20 <_read>
 8002c28:	1c43      	adds	r3, r0, #1
 8002c2a:	d102      	bne.n	8002c32 <_read_r+0x1e>
 8002c2c:	6823      	ldr	r3, [r4, #0]
 8002c2e:	b103      	cbz	r3, 8002c32 <_read_r+0x1e>
 8002c30:	602b      	str	r3, [r5, #0]
 8002c32:	bd38      	pop	{r3, r4, r5, pc}
 8002c34:	2000018c 	.word	0x2000018c

08002c38 <_fstat_r>:
 8002c38:	b538      	push	{r3, r4, r5, lr}
 8002c3a:	4c07      	ldr	r4, [pc, #28]	; (8002c58 <_fstat_r+0x20>)
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	4605      	mov	r5, r0
 8002c40:	4608      	mov	r0, r1
 8002c42:	4611      	mov	r1, r2
 8002c44:	6023      	str	r3, [r4, #0]
 8002c46:	f7ff f896 	bl	8001d76 <_fstat>
 8002c4a:	1c43      	adds	r3, r0, #1
 8002c4c:	d102      	bne.n	8002c54 <_fstat_r+0x1c>
 8002c4e:	6823      	ldr	r3, [r4, #0]
 8002c50:	b103      	cbz	r3, 8002c54 <_fstat_r+0x1c>
 8002c52:	602b      	str	r3, [r5, #0]
 8002c54:	bd38      	pop	{r3, r4, r5, pc}
 8002c56:	bf00      	nop
 8002c58:	2000018c 	.word	0x2000018c

08002c5c <_isatty_r>:
 8002c5c:	b538      	push	{r3, r4, r5, lr}
 8002c5e:	4c06      	ldr	r4, [pc, #24]	; (8002c78 <_isatty_r+0x1c>)
 8002c60:	2300      	movs	r3, #0
 8002c62:	4605      	mov	r5, r0
 8002c64:	4608      	mov	r0, r1
 8002c66:	6023      	str	r3, [r4, #0]
 8002c68:	f7ff f88a 	bl	8001d80 <_isatty>
 8002c6c:	1c43      	adds	r3, r0, #1
 8002c6e:	d102      	bne.n	8002c76 <_isatty_r+0x1a>
 8002c70:	6823      	ldr	r3, [r4, #0]
 8002c72:	b103      	cbz	r3, 8002c76 <_isatty_r+0x1a>
 8002c74:	602b      	str	r3, [r5, #0]
 8002c76:	bd38      	pop	{r3, r4, r5, pc}
 8002c78:	2000018c 	.word	0x2000018c

08002c7c <_init>:
 8002c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c7e:	bf00      	nop
 8002c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c82:	bc08      	pop	{r3}
 8002c84:	469e      	mov	lr, r3
 8002c86:	4770      	bx	lr

08002c88 <_fini>:
 8002c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c8a:	bf00      	nop
 8002c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c8e:	bc08      	pop	{r3}
 8002c90:	469e      	mov	lr, r3
 8002c92:	4770      	bx	lr
